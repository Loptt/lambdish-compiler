// Leetcode problem: https://leetcode.com/problems/cells-with-odd-values-in-a-matrix/

func map :: [num] l, (num => num) f1 => [num] (
    if (empty(l),
        [num],
        insert(
            f1(head(l)),
            map(tail(l), f1)
        )
    )
)

func getHeads :: [[num]] matrix => [num] (
    if (empty(matrix),
        [num],
        insert(
            head(head(matrix)),
            getHeads(tail(matrix))
        )
    )
)

func mapRowMat :: [num] l, [[num]] m, (num, [num] => [num]) f2 => [[num]] (
    if (or(empty(l), empty(m)),
        [[num]],
        insert(
            f2(head(l), head(m)),
            mapRowMat(tail(l), tail(m), f2)
        )
    )
)

func rows :: [[num]] matrix => num (
    if (empty(matrix),
        'c',
        +(1, rows(tail(matrix)))
    )
)

func elements :: [num] row => num (
    if (empty(row),
        0,
        +(1, elements(tail(row)))
    )
)

func getZeroRow :: num x => [num] (
    if (equal(x, 0),
        [num],
        insert(
            0,
            getZeroRow(-(x, 1))
        )
    )
)

func getZeroMatrix :: num x, num y => [[num]] (
    if (equal(x, 0),
        [[num]],
        insert(
            getZeroRow(y),
            getZeroMatrix(-(x,1), y)
        )
    )
)

func applyCol :: num index, [[num]] matrix => [[num]] (
    if (equal(index, 0),
        mapRowMat(
            map(getHeads(matrix), (# num x => num (+(x,1)))),
            matrix, 
            (# num h, [num] r => [num] (
                insert(h, r)
            ))
        ),
        mapRowMat(
            head(matrix), 
            applyCol(-(index, 1), tail(matrix)), 
            (# num h, [num] r => [num] (
                insert(h, r)
            ))
        )
    )
)

func applyRow :: num index, [[num]] matrix => [[num]] (
    if (equal(index, 0),
        insert(
            map(head(matrix), (# num x => num (+(x,1)))),
            matrix
        ),
        insert(
            head(matrix),
            applyRow(-(index, 1), tail(matrix))
        )
    )
)

func applyIncrement :: [num] index, [[num]] matrix => [[num]] (
    applyCol(head(tail(index)), applyRow(
        head(index),
        matrix
    ))
)

applyIncrement([2,2], getZeroMatrix(5,5))