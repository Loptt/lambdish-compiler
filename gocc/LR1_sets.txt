S0{
	S' : •Program «$»
	Program : •Functions Statement «$»
	Functions : •Function Functions «(»
	Functions : •Function Functions «[»
	Functions : •Function Functions «boolean»
	Functions : •Function Functions «charac»
	Functions : •Function Functions «id»
	Functions : •Function Functions «number»
	Functions : •Function Functions «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «(»
	Functions : •Function «[»
	Functions : •Function «boolean»
	Functions : •Function «charac»
	Functions : •Function «id»
	Functions : •Function «number»
	Functions : •Function «operations»
	Functions : •Function «relop»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «(»
	Function : •func id :: Params => Type ( Statement ) «[»
	Function : •func id :: Params => Type ( Statement ) «boolean»
	Function : •func id :: Params => Type ( Statement ) «charac»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «number»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
}
Transitions:
	Program -> 1
	Functions -> 2
	Function -> 3
	func -> 4


S1{
	S' : Program• «$»
}
Transitions:


S2{
	Program : Functions •Statement «$»
	Statement : •id «$»
	Statement : •Constant «$»
	Statement : •Lambda «$»
	Statement : •FunctionCall «$»
	Constant : •boolean «$»
	Constant : •number «$»
	Constant : •charac «$»
	Constant : •[ Args ] «$»
	Lambda : •( # Params => Type ( Statement ) ) «$»
	FunctionCall : •Statement ( Args ) «$»
	FunctionCall : •operations ( Args ) «$»
	FunctionCall : •relop ( Args ) «$»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 5
	id -> 6
	( -> 7
	[ -> 8
	Constant -> 9
	Lambda -> 10
	FunctionCall -> 11
	operations -> 12
	relop -> 13
	boolean -> 14
	number -> 15
	charac -> 16


S3{
	Functions : Function •Functions «(»
	Functions : Function •Functions «[»
	Functions : Function •Functions «boolean»
	Functions : Function •Functions «charac»
	Functions : Function •Functions «id»
	Functions : Function •Functions «number»
	Functions : Function •Functions «operations»
	Functions : Function •Functions «relop»
	Functions : Function• «(»
	Functions : Function• «[»
	Functions : Function• «boolean»
	Functions : Function• «charac»
	Functions : Function• «id»
	Functions : Function• «number»
	Functions : Function• «operations»
	Functions : Function• «relop»
	Functions : •Function Functions «(»
	Functions : •Function «(»
	Functions : •Function Functions «[»
	Functions : •Function «[»
	Functions : •Function Functions «boolean»
	Functions : •Function «boolean»
	Functions : •Function Functions «charac»
	Functions : •Function «charac»
	Functions : •Function Functions «id»
	Functions : •Function «id»
	Functions : •Function Functions «number»
	Functions : •Function «number»
	Functions : •Function Functions «operations»
	Functions : •Function «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «relop»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «(»
	Function : •func id :: Params => Type ( Statement ) «[»
	Function : •func id :: Params => Type ( Statement ) «boolean»
	Function : •func id :: Params => Type ( Statement ) «charac»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «number»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
}
Transitions:
	Function -> 3
	func -> 4
	Functions -> 17


S4{
	Function : func •id :: Params => Type ( Statement ) «func»
	Function : func •id :: Params => Type ( Statement ) «(»
	Function : func •id :: Params => Type ( Statement ) «[»
	Function : func •id :: Params => Type ( Statement ) «boolean»
	Function : func •id :: Params => Type ( Statement ) «charac»
	Function : func •id :: Params => Type ( Statement ) «id»
	Function : func •id :: Params => Type ( Statement ) «number»
	Function : func •id :: Params => Type ( Statement ) «operations»
	Function : func •id :: Params => Type ( Statement ) «relop»
}
Transitions:
	id -> 18


S5{
	Program : Functions Statement• «$»
	FunctionCall : Statement •( Args ) «$»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 19


S6{
	Statement : id• «$»
	Statement : id• «(»
}
Transitions:


S7{
	Lambda : ( •# Params => Type ( Statement ) ) «$»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 20


S8{
	Constant : [ •Args ] «$»
	Constant : [ •Args ] «(»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 21
	id -> 22
	( -> 23
	[ -> 24
	Constant -> 25
	Lambda -> 26
	FunctionCall -> 27
	Args -> 28
	operations -> 29
	relop -> 30
	boolean -> 31
	number -> 32
	charac -> 33


S9{
	Statement : Constant• «$»
	Statement : Constant• «(»
}
Transitions:


S10{
	Statement : Lambda• «$»
	Statement : Lambda• «(»
}
Transitions:


S11{
	Statement : FunctionCall• «$»
	Statement : FunctionCall• «(»
}
Transitions:


S12{
	FunctionCall : operations •( Args ) «$»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 34


S13{
	FunctionCall : relop •( Args ) «$»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 35


S14{
	Constant : boolean• «$»
	Constant : boolean• «(»
}
Transitions:


S15{
	Constant : number• «$»
	Constant : number• «(»
}
Transitions:


S16{
	Constant : charac• «$»
	Constant : charac• «(»
}
Transitions:


S17{
	Functions : Function Functions• «(»
	Functions : Function Functions• «[»
	Functions : Function Functions• «boolean»
	Functions : Function Functions• «charac»
	Functions : Function Functions• «id»
	Functions : Function Functions• «number»
	Functions : Function Functions• «operations»
	Functions : Function Functions• «relop»
}
Transitions:


S18{
	Function : func id •:: Params => Type ( Statement ) «func»
	Function : func id •:: Params => Type ( Statement ) «(»
	Function : func id •:: Params => Type ( Statement ) «[»
	Function : func id •:: Params => Type ( Statement ) «boolean»
	Function : func id •:: Params => Type ( Statement ) «charac»
	Function : func id •:: Params => Type ( Statement ) «id»
	Function : func id •:: Params => Type ( Statement ) «number»
	Function : func id •:: Params => Type ( Statement ) «operations»
	Function : func id •:: Params => Type ( Statement ) «relop»
}
Transitions:
	:: -> 36


S19{
	FunctionCall : Statement ( •Args ) «$»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	Args -> 44
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49


S20{
	Lambda : ( # •Params => Type ( Statement ) ) «$»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Params -> 50
	Type -> 51
	( -> 52
	BasicType -> 53
	[ -> 54
	num -> 55
	bool -> 56
	char -> 57


S21{
	Args : Statement •, Args «]»
	Args : Statement• «]»
	FunctionCall : Statement •( Args ) «,»
	FunctionCall : Statement •( Args ) «]»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 58
	, -> 59


S22{
	Statement : id• «,»
	Statement : id• «]»
	Statement : id• «(»
}
Transitions:


S23{
	Lambda : ( •# Params => Type ( Statement ) ) «,»
	Lambda : ( •# Params => Type ( Statement ) ) «]»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 60


S24{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «]»
	Constant : [ •Args ] «(»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 21
	id -> 22
	( -> 23
	[ -> 24
	Constant -> 25
	Lambda -> 26
	FunctionCall -> 27
	operations -> 29
	relop -> 30
	boolean -> 31
	number -> 32
	charac -> 33
	Args -> 61


S25{
	Statement : Constant• «,»
	Statement : Constant• «]»
	Statement : Constant• «(»
}
Transitions:


S26{
	Statement : Lambda• «,»
	Statement : Lambda• «]»
	Statement : Lambda• «(»
}
Transitions:


S27{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «]»
	Statement : FunctionCall• «(»
}
Transitions:


S28{
	Constant : [ Args •] «$»
	Constant : [ Args •] «(»
}
Transitions:
	] -> 62


S29{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «]»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 63


S30{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «]»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 64


S31{
	Constant : boolean• «,»
	Constant : boolean• «]»
	Constant : boolean• «(»
}
Transitions:


S32{
	Constant : number• «,»
	Constant : number• «]»
	Constant : number• «(»
}
Transitions:


S33{
	Constant : charac• «,»
	Constant : charac• «]»
	Constant : charac• «(»
}
Transitions:


S34{
	FunctionCall : operations ( •Args ) «$»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 65


S35{
	FunctionCall : relop ( •Args ) «$»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 66


S36{
	Function : func id :: •Params => Type ( Statement ) «func»
	Function : func id :: •Params => Type ( Statement ) «(»
	Function : func id :: •Params => Type ( Statement ) «[»
	Function : func id :: •Params => Type ( Statement ) «boolean»
	Function : func id :: •Params => Type ( Statement ) «charac»
	Function : func id :: •Params => Type ( Statement ) «id»
	Function : func id :: •Params => Type ( Statement ) «number»
	Function : func id :: •Params => Type ( Statement ) «operations»
	Function : func id :: •Params => Type ( Statement ) «relop»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 51
	( -> 52
	BasicType -> 53
	[ -> 54
	num -> 55
	bool -> 56
	char -> 57
	Params -> 67


S37{
	Args : Statement •, Args «)»
	Args : Statement• «)»
	FunctionCall : Statement •( Args ) «,»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 68
	, -> 69


S38{
	Statement : id• «,»
	Statement : id• «)»
	Statement : id• «(»
}
Transitions:


S39{
	Lambda : ( •# Params => Type ( Statement ) ) «,»
	Lambda : ( •# Params => Type ( Statement ) ) «)»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 70


S40{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «)»
	Constant : [ •Args ] «(»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 21
	id -> 22
	( -> 23
	[ -> 24
	Constant -> 25
	Lambda -> 26
	FunctionCall -> 27
	operations -> 29
	relop -> 30
	boolean -> 31
	number -> 32
	charac -> 33
	Args -> 71


S41{
	Statement : Constant• «,»
	Statement : Constant• «)»
	Statement : Constant• «(»
}
Transitions:


S42{
	Statement : Lambda• «,»
	Statement : Lambda• «)»
	Statement : Lambda• «(»
}
Transitions:


S43{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «)»
	Statement : FunctionCall• «(»
}
Transitions:


S44{
	FunctionCall : Statement ( Args •) «$»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 72


S45{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «)»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 73


S46{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «)»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 74


S47{
	Constant : boolean• «,»
	Constant : boolean• «)»
	Constant : boolean• «(»
}
Transitions:


S48{
	Constant : number• «,»
	Constant : number• «)»
	Constant : number• «(»
}
Transitions:


S49{
	Constant : charac• «,»
	Constant : charac• «)»
	Constant : charac• «(»
}
Transitions:


S50{
	Lambda : ( # Params •=> Type ( Statement ) ) «$»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 75


S51{
	Params : Type •id , Params «=>»
	Params : Type •id «=>»
}
Transitions:
	id -> 76


S52{
	Type : ( •FuncTypes => Type ) «id»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 77
	( -> 78
	BasicType -> 79
	FuncTypes -> 80
	[ -> 81
	num -> 82
	bool -> 83
	char -> 84


S53{
	Type : BasicType• «id»
}
Transitions:


S54{
	Type : [ •Type ] «id»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	Type -> 85
	( -> 86
	BasicType -> 87
	[ -> 88
	num -> 89
	bool -> 90
	char -> 91


S55{
	BasicType : num• «id»
}
Transitions:


S56{
	BasicType : bool• «id»
}
Transitions:


S57{
	BasicType : char• «id»
}
Transitions:


S58{
	FunctionCall : Statement ( •Args ) «,»
	FunctionCall : Statement ( •Args ) «]»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 92


S59{
	Args : Statement , •Args «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 21
	id -> 22
	( -> 23
	[ -> 24
	Constant -> 25
	Lambda -> 26
	FunctionCall -> 27
	operations -> 29
	relop -> 30
	boolean -> 31
	number -> 32
	charac -> 33
	Args -> 93


S60{
	Lambda : ( # •Params => Type ( Statement ) ) «,»
	Lambda : ( # •Params => Type ( Statement ) ) «]»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 51
	( -> 52
	BasicType -> 53
	[ -> 54
	num -> 55
	bool -> 56
	char -> 57
	Params -> 94


S61{
	Constant : [ Args •] «,»
	Constant : [ Args •] «]»
	Constant : [ Args •] «(»
}
Transitions:
	] -> 95


S62{
	Constant : [ Args ]• «$»
	Constant : [ Args ]• «(»
}
Transitions:


S63{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «]»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 96


S64{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «]»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 97


S65{
	FunctionCall : operations ( Args •) «$»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 98


S66{
	FunctionCall : relop ( Args •) «$»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 99


S67{
	Function : func id :: Params •=> Type ( Statement ) «func»
	Function : func id :: Params •=> Type ( Statement ) «(»
	Function : func id :: Params •=> Type ( Statement ) «[»
	Function : func id :: Params •=> Type ( Statement ) «boolean»
	Function : func id :: Params •=> Type ( Statement ) «charac»
	Function : func id :: Params •=> Type ( Statement ) «id»
	Function : func id :: Params •=> Type ( Statement ) «number»
	Function : func id :: Params •=> Type ( Statement ) «operations»
	Function : func id :: Params •=> Type ( Statement ) «relop»
}
Transitions:
	=> -> 100


S68{
	FunctionCall : Statement ( •Args ) «,»
	FunctionCall : Statement ( •Args ) «)»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 101


S69{
	Args : Statement , •Args «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 102


S70{
	Lambda : ( # •Params => Type ( Statement ) ) «,»
	Lambda : ( # •Params => Type ( Statement ) ) «)»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 51
	( -> 52
	BasicType -> 53
	[ -> 54
	num -> 55
	bool -> 56
	char -> 57
	Params -> 103


S71{
	Constant : [ Args •] «,»
	Constant : [ Args •] «)»
	Constant : [ Args •] «(»
}
Transitions:
	] -> 104


S72{
	FunctionCall : Statement ( Args )• «$»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S73{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «)»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 105


S74{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «)»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 106


S75{
	Lambda : ( # Params => •Type ( Statement ) ) «$»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	Type -> 107
	( -> 108
	BasicType -> 109
	[ -> 110
	num -> 111
	bool -> 112
	char -> 113


S76{
	Params : Type id •, Params «=>»
	Params : Type id• «=>»
}
Transitions:
	, -> 114


S77{
	FuncTypes : Type •, FuncTypes «=>»
	FuncTypes : Type• «=>»
}
Transitions:
	, -> 115


S78{
	Type : ( •FuncTypes => Type ) «,»
	Type : ( •FuncTypes => Type ) «=>»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 77
	( -> 78
	BasicType -> 79
	[ -> 81
	num -> 82
	bool -> 83
	char -> 84
	FuncTypes -> 116


S79{
	Type : BasicType• «,»
	Type : BasicType• «=>»
}
Transitions:


S80{
	Type : ( FuncTypes •=> Type ) «id»
}
Transitions:
	=> -> 117


S81{
	Type : [ •Type ] «,»
	Type : [ •Type ] «=>»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	( -> 86
	BasicType -> 87
	[ -> 88
	num -> 89
	bool -> 90
	char -> 91
	Type -> 118


S82{
	BasicType : num• «,»
	BasicType : num• «=>»
}
Transitions:


S83{
	BasicType : bool• «,»
	BasicType : bool• «=>»
}
Transitions:


S84{
	BasicType : char• «,»
	BasicType : char• «=>»
}
Transitions:


S85{
	Type : [ Type •] «id»
}
Transitions:
	] -> 119


S86{
	Type : ( •FuncTypes => Type ) «]»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 77
	( -> 78
	BasicType -> 79
	[ -> 81
	num -> 82
	bool -> 83
	char -> 84
	FuncTypes -> 120


S87{
	Type : BasicType• «]»
}
Transitions:


S88{
	Type : [ •Type ] «]»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	( -> 86
	BasicType -> 87
	[ -> 88
	num -> 89
	bool -> 90
	char -> 91
	Type -> 121


S89{
	BasicType : num• «]»
}
Transitions:


S90{
	BasicType : bool• «]»
}
Transitions:


S91{
	BasicType : char• «]»
}
Transitions:


S92{
	FunctionCall : Statement ( Args •) «,»
	FunctionCall : Statement ( Args •) «]»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 122


S93{
	Args : Statement , Args• «]»
}
Transitions:


S94{
	Lambda : ( # Params •=> Type ( Statement ) ) «,»
	Lambda : ( # Params •=> Type ( Statement ) ) «]»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 123


S95{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «]»
	Constant : [ Args ]• «(»
}
Transitions:


S96{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «]»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 124


S97{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «]»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 125


S98{
	FunctionCall : operations ( Args )• «$»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S99{
	FunctionCall : relop ( Args )• «$»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S100{
	Function : func id :: Params => •Type ( Statement ) «func»
	Function : func id :: Params => •Type ( Statement ) «(»
	Function : func id :: Params => •Type ( Statement ) «[»
	Function : func id :: Params => •Type ( Statement ) «boolean»
	Function : func id :: Params => •Type ( Statement ) «charac»
	Function : func id :: Params => •Type ( Statement ) «id»
	Function : func id :: Params => •Type ( Statement ) «number»
	Function : func id :: Params => •Type ( Statement ) «operations»
	Function : func id :: Params => •Type ( Statement ) «relop»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 108
	BasicType -> 109
	[ -> 110
	num -> 111
	bool -> 112
	char -> 113
	Type -> 126


S101{
	FunctionCall : Statement ( Args •) «,»
	FunctionCall : Statement ( Args •) «)»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 127


S102{
	Args : Statement , Args• «)»
}
Transitions:


S103{
	Lambda : ( # Params •=> Type ( Statement ) ) «,»
	Lambda : ( # Params •=> Type ( Statement ) ) «)»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 128


S104{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «)»
	Constant : [ Args ]• «(»
}
Transitions:


S105{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «)»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 129


S106{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «)»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 130


S107{
	Lambda : ( # Params => Type •( Statement ) ) «$»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 131


S108{
	Type : ( •FuncTypes => Type ) «(»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 77
	( -> 78
	BasicType -> 79
	[ -> 81
	num -> 82
	bool -> 83
	char -> 84
	FuncTypes -> 132


S109{
	Type : BasicType• «(»
}
Transitions:


S110{
	Type : [ •Type ] «(»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	( -> 86
	BasicType -> 87
	[ -> 88
	num -> 89
	bool -> 90
	char -> 91
	Type -> 133


S111{
	BasicType : num• «(»
}
Transitions:


S112{
	BasicType : bool• «(»
}
Transitions:


S113{
	BasicType : char• «(»
}
Transitions:


S114{
	Params : Type id , •Params «=>»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 51
	( -> 52
	BasicType -> 53
	[ -> 54
	num -> 55
	bool -> 56
	char -> 57
	Params -> 134


S115{
	FuncTypes : Type , •FuncTypes «=>»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 77
	( -> 78
	BasicType -> 79
	[ -> 81
	num -> 82
	bool -> 83
	char -> 84
	FuncTypes -> 135


S116{
	Type : ( FuncTypes •=> Type ) «,»
	Type : ( FuncTypes •=> Type ) «=>»
}
Transitions:
	=> -> 136


S117{
	Type : ( FuncTypes => •Type ) «id»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	Type -> 137
	( -> 138
	BasicType -> 139
	[ -> 140
	num -> 141
	bool -> 142
	char -> 143


S118{
	Type : [ Type •] «,»
	Type : [ Type •] «=>»
}
Transitions:
	] -> 144


S119{
	Type : [ Type ]• «id»
}
Transitions:


S120{
	Type : ( FuncTypes •=> Type ) «]»
}
Transitions:
	=> -> 145


S121{
	Type : [ Type •] «]»
}
Transitions:
	] -> 146


S122{
	FunctionCall : Statement ( Args )• «,»
	FunctionCall : Statement ( Args )• «]»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S123{
	Lambda : ( # Params => •Type ( Statement ) ) «,»
	Lambda : ( # Params => •Type ( Statement ) ) «]»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 108
	BasicType -> 109
	[ -> 110
	num -> 111
	bool -> 112
	char -> 113
	Type -> 147


S124{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «]»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S125{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «]»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S126{
	Function : func id :: Params => Type •( Statement ) «func»
	Function : func id :: Params => Type •( Statement ) «(»
	Function : func id :: Params => Type •( Statement ) «[»
	Function : func id :: Params => Type •( Statement ) «boolean»
	Function : func id :: Params => Type •( Statement ) «charac»
	Function : func id :: Params => Type •( Statement ) «id»
	Function : func id :: Params => Type •( Statement ) «number»
	Function : func id :: Params => Type •( Statement ) «operations»
	Function : func id :: Params => Type •( Statement ) «relop»
}
Transitions:
	( -> 148


S127{
	FunctionCall : Statement ( Args )• «,»
	FunctionCall : Statement ( Args )• «)»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S128{
	Lambda : ( # Params => •Type ( Statement ) ) «,»
	Lambda : ( # Params => •Type ( Statement ) ) «)»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 108
	BasicType -> 109
	[ -> 110
	num -> 111
	bool -> 112
	char -> 113
	Type -> 149


S129{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «)»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S130{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «)»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S131{
	Lambda : ( # Params => Type ( •Statement ) ) «$»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 150
	id -> 151
	( -> 152
	[ -> 153
	Constant -> 154
	Lambda -> 155
	FunctionCall -> 156
	operations -> 157
	relop -> 158
	boolean -> 159
	number -> 160
	charac -> 161


S132{
	Type : ( FuncTypes •=> Type ) «(»
}
Transitions:
	=> -> 162


S133{
	Type : [ Type •] «(»
}
Transitions:
	] -> 163


S134{
	Params : Type id , Params• «=>»
}
Transitions:


S135{
	FuncTypes : Type , FuncTypes• «=>»
}
Transitions:


S136{
	Type : ( FuncTypes => •Type ) «,»
	Type : ( FuncTypes => •Type ) «=>»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 138
	BasicType -> 139
	[ -> 140
	num -> 141
	bool -> 142
	char -> 143
	Type -> 164


S137{
	Type : ( FuncTypes => Type •) «id»
}
Transitions:
	) -> 165


S138{
	Type : ( •FuncTypes => Type ) «)»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 77
	( -> 78
	BasicType -> 79
	[ -> 81
	num -> 82
	bool -> 83
	char -> 84
	FuncTypes -> 166


S139{
	Type : BasicType• «)»
}
Transitions:


S140{
	Type : [ •Type ] «)»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	( -> 86
	BasicType -> 87
	[ -> 88
	num -> 89
	bool -> 90
	char -> 91
	Type -> 167


S141{
	BasicType : num• «)»
}
Transitions:


S142{
	BasicType : bool• «)»
}
Transitions:


S143{
	BasicType : char• «)»
}
Transitions:


S144{
	Type : [ Type ]• «,»
	Type : [ Type ]• «=>»
}
Transitions:


S145{
	Type : ( FuncTypes => •Type ) «]»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 138
	BasicType -> 139
	[ -> 140
	num -> 141
	bool -> 142
	char -> 143
	Type -> 168


S146{
	Type : [ Type ]• «]»
}
Transitions:


S147{
	Lambda : ( # Params => Type •( Statement ) ) «,»
	Lambda : ( # Params => Type •( Statement ) ) «]»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 169


S148{
	Function : func id :: Params => Type ( •Statement ) «func»
	Function : func id :: Params => Type ( •Statement ) «(»
	Function : func id :: Params => Type ( •Statement ) «[»
	Function : func id :: Params => Type ( •Statement ) «boolean»
	Function : func id :: Params => Type ( •Statement ) «charac»
	Function : func id :: Params => Type ( •Statement ) «id»
	Function : func id :: Params => Type ( •Statement ) «number»
	Function : func id :: Params => Type ( •Statement ) «operations»
	Function : func id :: Params => Type ( •Statement ) «relop»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 151
	( -> 152
	[ -> 153
	Constant -> 154
	Lambda -> 155
	FunctionCall -> 156
	operations -> 157
	relop -> 158
	boolean -> 159
	number -> 160
	charac -> 161
	Statement -> 170


S149{
	Lambda : ( # Params => Type •( Statement ) ) «,»
	Lambda : ( # Params => Type •( Statement ) ) «)»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 171


S150{
	Lambda : ( # Params => Type ( Statement •) ) «$»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 172
	) -> 173


S151{
	Statement : id• «)»
	Statement : id• «(»
}
Transitions:


S152{
	Lambda : ( •# Params => Type ( Statement ) ) «)»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 174


S153{
	Constant : [ •Args ] «)»
	Constant : [ •Args ] «(»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 21
	id -> 22
	( -> 23
	[ -> 24
	Constant -> 25
	Lambda -> 26
	FunctionCall -> 27
	operations -> 29
	relop -> 30
	boolean -> 31
	number -> 32
	charac -> 33
	Args -> 175


S154{
	Statement : Constant• «)»
	Statement : Constant• «(»
}
Transitions:


S155{
	Statement : Lambda• «)»
	Statement : Lambda• «(»
}
Transitions:


S156{
	Statement : FunctionCall• «)»
	Statement : FunctionCall• «(»
}
Transitions:


S157{
	FunctionCall : operations •( Args ) «)»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 176


S158{
	FunctionCall : relop •( Args ) «)»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 177


S159{
	Constant : boolean• «)»
	Constant : boolean• «(»
}
Transitions:


S160{
	Constant : number• «)»
	Constant : number• «(»
}
Transitions:


S161{
	Constant : charac• «)»
	Constant : charac• «(»
}
Transitions:


S162{
	Type : ( FuncTypes => •Type ) «(»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 138
	BasicType -> 139
	[ -> 140
	num -> 141
	bool -> 142
	char -> 143
	Type -> 178


S163{
	Type : [ Type ]• «(»
}
Transitions:


S164{
	Type : ( FuncTypes => Type •) «,»
	Type : ( FuncTypes => Type •) «=>»
}
Transitions:
	) -> 179


S165{
	Type : ( FuncTypes => Type )• «id»
}
Transitions:


S166{
	Type : ( FuncTypes •=> Type ) «)»
}
Transitions:
	=> -> 180


S167{
	Type : [ Type •] «)»
}
Transitions:
	] -> 181


S168{
	Type : ( FuncTypes => Type •) «]»
}
Transitions:
	) -> 182


S169{
	Lambda : ( # Params => Type ( •Statement ) ) «,»
	Lambda : ( # Params => Type ( •Statement ) ) «]»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 151
	( -> 152
	[ -> 153
	Constant -> 154
	Lambda -> 155
	FunctionCall -> 156
	operations -> 157
	relop -> 158
	boolean -> 159
	number -> 160
	charac -> 161
	Statement -> 183


S170{
	Function : func id :: Params => Type ( Statement •) «func»
	Function : func id :: Params => Type ( Statement •) «(»
	Function : func id :: Params => Type ( Statement •) «[»
	Function : func id :: Params => Type ( Statement •) «boolean»
	Function : func id :: Params => Type ( Statement •) «charac»
	Function : func id :: Params => Type ( Statement •) «id»
	Function : func id :: Params => Type ( Statement •) «number»
	Function : func id :: Params => Type ( Statement •) «operations»
	Function : func id :: Params => Type ( Statement •) «relop»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 172
	) -> 184


S171{
	Lambda : ( # Params => Type ( •Statement ) ) «,»
	Lambda : ( # Params => Type ( •Statement ) ) «)»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 151
	( -> 152
	[ -> 153
	Constant -> 154
	Lambda -> 155
	FunctionCall -> 156
	operations -> 157
	relop -> 158
	boolean -> 159
	number -> 160
	charac -> 161
	Statement -> 185


S172{
	FunctionCall : Statement ( •Args ) «)»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 186


S173{
	Lambda : ( # Params => Type ( Statement ) •) «$»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 187


S174{
	Lambda : ( # •Params => Type ( Statement ) ) «)»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 51
	( -> 52
	BasicType -> 53
	[ -> 54
	num -> 55
	bool -> 56
	char -> 57
	Params -> 188


S175{
	Constant : [ Args •] «)»
	Constant : [ Args •] «(»
}
Transitions:
	] -> 189


S176{
	FunctionCall : operations ( •Args ) «)»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 190


S177{
	FunctionCall : relop ( •Args ) «)»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 37
	id -> 38
	( -> 39
	[ -> 40
	Constant -> 41
	Lambda -> 42
	FunctionCall -> 43
	operations -> 45
	relop -> 46
	boolean -> 47
	number -> 48
	charac -> 49
	Args -> 191


S178{
	Type : ( FuncTypes => Type •) «(»
}
Transitions:
	) -> 192


S179{
	Type : ( FuncTypes => Type )• «,»
	Type : ( FuncTypes => Type )• «=>»
}
Transitions:


S180{
	Type : ( FuncTypes => •Type ) «)»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 138
	BasicType -> 139
	[ -> 140
	num -> 141
	bool -> 142
	char -> 143
	Type -> 193


S181{
	Type : [ Type ]• «)»
}
Transitions:


S182{
	Type : ( FuncTypes => Type )• «]»
}
Transitions:


S183{
	Lambda : ( # Params => Type ( Statement •) ) «,»
	Lambda : ( # Params => Type ( Statement •) ) «]»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 172
	) -> 194


S184{
	Function : func id :: Params => Type ( Statement )• «func»
	Function : func id :: Params => Type ( Statement )• «(»
	Function : func id :: Params => Type ( Statement )• «[»
	Function : func id :: Params => Type ( Statement )• «boolean»
	Function : func id :: Params => Type ( Statement )• «charac»
	Function : func id :: Params => Type ( Statement )• «id»
	Function : func id :: Params => Type ( Statement )• «number»
	Function : func id :: Params => Type ( Statement )• «operations»
	Function : func id :: Params => Type ( Statement )• «relop»
}
Transitions:


S185{
	Lambda : ( # Params => Type ( Statement •) ) «,»
	Lambda : ( # Params => Type ( Statement •) ) «)»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 172
	) -> 195


S186{
	FunctionCall : Statement ( Args •) «)»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 196


S187{
	Lambda : ( # Params => Type ( Statement ) )• «$»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


S188{
	Lambda : ( # Params •=> Type ( Statement ) ) «)»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 197


S189{
	Constant : [ Args ]• «)»
	Constant : [ Args ]• «(»
}
Transitions:


S190{
	FunctionCall : operations ( Args •) «)»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 198


S191{
	FunctionCall : relop ( Args •) «)»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 199


S192{
	Type : ( FuncTypes => Type )• «(»
}
Transitions:


S193{
	Type : ( FuncTypes => Type •) «)»
}
Transitions:
	) -> 200


S194{
	Lambda : ( # Params => Type ( Statement ) •) «,»
	Lambda : ( # Params => Type ( Statement ) •) «]»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 201


S195{
	Lambda : ( # Params => Type ( Statement ) •) «,»
	Lambda : ( # Params => Type ( Statement ) •) «)»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 202


S196{
	FunctionCall : Statement ( Args )• «)»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S197{
	Lambda : ( # Params => •Type ( Statement ) ) «)»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 108
	BasicType -> 109
	[ -> 110
	num -> 111
	bool -> 112
	char -> 113
	Type -> 203


S198{
	FunctionCall : operations ( Args )• «)»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S199{
	FunctionCall : relop ( Args )• «)»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S200{
	Type : ( FuncTypes => Type )• «)»
}
Transitions:


S201{
	Lambda : ( # Params => Type ( Statement ) )• «,»
	Lambda : ( # Params => Type ( Statement ) )• «]»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


S202{
	Lambda : ( # Params => Type ( Statement ) )• «,»
	Lambda : ( # Params => Type ( Statement ) )• «)»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


S203{
	Lambda : ( # Params => Type •( Statement ) ) «)»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 204


S204{
	Lambda : ( # Params => Type ( •Statement ) ) «)»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •[ Args ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 151
	( -> 152
	[ -> 153
	Constant -> 154
	Lambda -> 155
	FunctionCall -> 156
	operations -> 157
	relop -> 158
	boolean -> 159
	number -> 160
	charac -> 161
	Statement -> 205


S205{
	Lambda : ( # Params => Type ( Statement •) ) «)»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 172
	) -> 206


S206{
	Lambda : ( # Params => Type ( Statement ) •) «)»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 207


S207{
	Lambda : ( # Params => Type ( Statement ) )• «)»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


