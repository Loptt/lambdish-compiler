S0{
	S' : •Program «$»
	Program : •Functions Statement «$»
	Functions : •Function Functions «(»
	Functions : •Function Functions «[»
	Functions : •Function Functions «boolean»
	Functions : •Function Functions «charac»
	Functions : •Function Functions «id»
	Functions : •Function Functions «number»
	Functions : •Function Functions «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «(»
	Functions : •Function «[»
	Functions : •Function «boolean»
	Functions : •Function «charac»
	Functions : •Function «id»
	Functions : •Function «number»
	Functions : •Function «operations»
	Functions : •Function «relop»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «(»
	Function : •func id :: Params => Type ( Statement ) «[»
	Function : •func id :: Params => Type ( Statement ) «boolean»
	Function : •func id :: Params => Type ( Statement ) «charac»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «number»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
}
Transitions:
	Program -> 1
	Functions -> 2
	Function -> 3
	func -> 4


S1{
	S' : Program• «$»
}
Transitions:


S2{
	Program : Functions •Statement «$»
	Statement : •id «$»
	Statement : •Constant «$»
	Statement : •LambdaExpr «$»
	Statement : •FunctionCall «$»
	Constant : •boolean «$»
	Constant : •number «$»
	Constant : •charac «$»
	Constant : •[ Args ] «$»
	LambdaExpr : •Lambda «$»
	LambdaExpr : •LambdaCall «$»
	FunctionCall : •id ( Args ) «$»
	FunctionCall : •operations ( Args ) «$»
	FunctionCall : •relop ( Args ) «$»
	Lambda : •( # Params => ( Statement ) ) «$»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «$»
}
Transitions:
	Statement -> 5
	id -> 6
	( -> 7
	[ -> 8
	Constant -> 9
	LambdaExpr -> 10
	FunctionCall -> 11
	operations -> 12
	relop -> 13
	Lambda -> 14
	LambdaCall -> 15
	boolean -> 16
	number -> 17
	charac -> 18


S3{
	Functions : Function •Functions «(»
	Functions : Function •Functions «[»
	Functions : Function •Functions «boolean»
	Functions : Function •Functions «charac»
	Functions : Function •Functions «id»
	Functions : Function •Functions «number»
	Functions : Function •Functions «operations»
	Functions : Function •Functions «relop»
	Functions : Function• «(»
	Functions : Function• «[»
	Functions : Function• «boolean»
	Functions : Function• «charac»
	Functions : Function• «id»
	Functions : Function• «number»
	Functions : Function• «operations»
	Functions : Function• «relop»
	Functions : •Function Functions «(»
	Functions : •Function «(»
	Functions : •Function Functions «[»
	Functions : •Function «[»
	Functions : •Function Functions «boolean»
	Functions : •Function «boolean»
	Functions : •Function Functions «charac»
	Functions : •Function «charac»
	Functions : •Function Functions «id»
	Functions : •Function «id»
	Functions : •Function Functions «number»
	Functions : •Function «number»
	Functions : •Function Functions «operations»
	Functions : •Function «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «relop»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «(»
	Function : •func id :: Params => Type ( Statement ) «[»
	Function : •func id :: Params => Type ( Statement ) «boolean»
	Function : •func id :: Params => Type ( Statement ) «charac»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «number»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
}
Transitions:
	Function -> 3
	func -> 4
	Functions -> 19


S4{
	Function : func •id :: Params => Type ( Statement ) «func»
	Function : func •id :: Params => Type ( Statement ) «(»
	Function : func •id :: Params => Type ( Statement ) «[»
	Function : func •id :: Params => Type ( Statement ) «boolean»
	Function : func •id :: Params => Type ( Statement ) «charac»
	Function : func •id :: Params => Type ( Statement ) «id»
	Function : func •id :: Params => Type ( Statement ) «number»
	Function : func •id :: Params => Type ( Statement ) «operations»
	Function : func •id :: Params => Type ( Statement ) «relop»
}
Transitions:
	id -> 20


S5{
	Program : Functions Statement• «$»
}
Transitions:


S6{
	Statement : id• «$»
	FunctionCall : id •( Args ) «$»
}
Transitions:
	( -> 21


S7{
	Lambda : ( •# Params => ( Statement ) ) «$»
	LambdaCall : ( •# Params => ( Statement ) ) ( Args ) «$»
}
Transitions:
	# -> 22


S8{
	Constant : [ •Args ] «$»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •LambdaCall «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «]»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «]»
}
Transitions:
	Statement -> 23
	id -> 24
	( -> 25
	[ -> 26
	Constant -> 27
	LambdaExpr -> 28
	FunctionCall -> 29
	Args -> 30
	operations -> 31
	relop -> 32
	Lambda -> 33
	LambdaCall -> 34
	boolean -> 35
	number -> 36
	charac -> 37


S9{
	Statement : Constant• «$»
}
Transitions:


S10{
	Statement : LambdaExpr• «$»
}
Transitions:


S11{
	Statement : FunctionCall• «$»
}
Transitions:


S12{
	FunctionCall : operations •( Args ) «$»
}
Transitions:
	( -> 38


S13{
	FunctionCall : relop •( Args ) «$»
}
Transitions:
	( -> 39


S14{
	LambdaExpr : Lambda• «$»
}
Transitions:


S15{
	LambdaExpr : LambdaCall• «$»
}
Transitions:


S16{
	Constant : boolean• «$»
}
Transitions:


S17{
	Constant : number• «$»
}
Transitions:


S18{
	Constant : charac• «$»
}
Transitions:


S19{
	Functions : Function Functions• «(»
	Functions : Function Functions• «[»
	Functions : Function Functions• «boolean»
	Functions : Function Functions• «charac»
	Functions : Function Functions• «id»
	Functions : Function Functions• «number»
	Functions : Function Functions• «operations»
	Functions : Function Functions• «relop»
}
Transitions:


S20{
	Function : func id •:: Params => Type ( Statement ) «func»
	Function : func id •:: Params => Type ( Statement ) «(»
	Function : func id •:: Params => Type ( Statement ) «[»
	Function : func id •:: Params => Type ( Statement ) «boolean»
	Function : func id •:: Params => Type ( Statement ) «charac»
	Function : func id •:: Params => Type ( Statement ) «id»
	Function : func id •:: Params => Type ( Statement ) «number»
	Function : func id •:: Params => Type ( Statement ) «operations»
	Function : func id •:: Params => Type ( Statement ) «relop»
}
Transitions:
	:: -> 40


S21{
	FunctionCall : id ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	Args -> 48
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55


S22{
	Lambda : ( # •Params => ( Statement ) ) «$»
	LambdaCall : ( # •Params => ( Statement ) ) ( Args ) «$»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Params -> 56
	Type -> 57
	num -> 58
	bool -> 59
	char -> 60
	[ -> 61


S23{
	Args : Statement •, Args «]»
	Args : Statement• «]»
}
Transitions:
	, -> 62


S24{
	Statement : id• «,»
	Statement : id• «]»
	FunctionCall : id •( Args ) «,»
	FunctionCall : id •( Args ) «]»
}
Transitions:
	( -> 63


S25{
	Lambda : ( •# Params => ( Statement ) ) «,»
	LambdaCall : ( •# Params => ( Statement ) ) ( Args ) «,»
	Lambda : ( •# Params => ( Statement ) ) «]»
	LambdaCall : ( •# Params => ( Statement ) ) ( Args ) «]»
}
Transitions:
	# -> 64


S26{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •LambdaCall «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «]»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «]»
}
Transitions:
	Statement -> 23
	id -> 24
	( -> 25
	[ -> 26
	Constant -> 27
	LambdaExpr -> 28
	FunctionCall -> 29
	operations -> 31
	relop -> 32
	Lambda -> 33
	LambdaCall -> 34
	boolean -> 35
	number -> 36
	charac -> 37
	Args -> 65


S27{
	Statement : Constant• «,»
	Statement : Constant• «]»
}
Transitions:


S28{
	Statement : LambdaExpr• «,»
	Statement : LambdaExpr• «]»
}
Transitions:


S29{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «]»
}
Transitions:


S30{
	Constant : [ Args •] «$»
}
Transitions:
	] -> 66


S31{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «]»
}
Transitions:
	( -> 67


S32{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «]»
}
Transitions:
	( -> 68


S33{
	LambdaExpr : Lambda• «,»
	LambdaExpr : Lambda• «]»
}
Transitions:


S34{
	LambdaExpr : LambdaCall• «,»
	LambdaExpr : LambdaCall• «]»
}
Transitions:


S35{
	Constant : boolean• «,»
	Constant : boolean• «]»
}
Transitions:


S36{
	Constant : number• «,»
	Constant : number• «]»
}
Transitions:


S37{
	Constant : charac• «,»
	Constant : charac• «]»
}
Transitions:


S38{
	FunctionCall : operations ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 69


S39{
	FunctionCall : relop ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 70


S40{
	Function : func id :: •Params => Type ( Statement ) «func»
	Function : func id :: •Params => Type ( Statement ) «(»
	Function : func id :: •Params => Type ( Statement ) «[»
	Function : func id :: •Params => Type ( Statement ) «boolean»
	Function : func id :: •Params => Type ( Statement ) «charac»
	Function : func id :: •Params => Type ( Statement ) «id»
	Function : func id :: •Params => Type ( Statement ) «number»
	Function : func id :: •Params => Type ( Statement ) «operations»
	Function : func id :: •Params => Type ( Statement ) «relop»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 57
	num -> 58
	bool -> 59
	char -> 60
	[ -> 61
	Params -> 71


S41{
	Args : Statement •, Args «)»
	Args : Statement• «)»
}
Transitions:
	, -> 72


S42{
	Statement : id• «,»
	Statement : id• «)»
	FunctionCall : id •( Args ) «,»
	FunctionCall : id •( Args ) «)»
}
Transitions:
	( -> 73


S43{
	Lambda : ( •# Params => ( Statement ) ) «,»
	LambdaCall : ( •# Params => ( Statement ) ) ( Args ) «,»
	Lambda : ( •# Params => ( Statement ) ) «)»
	LambdaCall : ( •# Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	# -> 74


S44{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «)»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •LambdaCall «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «]»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «]»
}
Transitions:
	Statement -> 23
	id -> 24
	( -> 25
	[ -> 26
	Constant -> 27
	LambdaExpr -> 28
	FunctionCall -> 29
	operations -> 31
	relop -> 32
	Lambda -> 33
	LambdaCall -> 34
	boolean -> 35
	number -> 36
	charac -> 37
	Args -> 75


S45{
	Statement : Constant• «,»
	Statement : Constant• «)»
}
Transitions:


S46{
	Statement : LambdaExpr• «,»
	Statement : LambdaExpr• «)»
}
Transitions:


S47{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «)»
}
Transitions:


S48{
	FunctionCall : id ( Args •) «$»
}
Transitions:
	) -> 76


S49{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «)»
}
Transitions:
	( -> 77


S50{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «)»
}
Transitions:
	( -> 78


S51{
	LambdaExpr : Lambda• «,»
	LambdaExpr : Lambda• «)»
}
Transitions:


S52{
	LambdaExpr : LambdaCall• «,»
	LambdaExpr : LambdaCall• «)»
}
Transitions:


S53{
	Constant : boolean• «,»
	Constant : boolean• «)»
}
Transitions:


S54{
	Constant : number• «,»
	Constant : number• «)»
}
Transitions:


S55{
	Constant : charac• «,»
	Constant : charac• «)»
}
Transitions:


S56{
	Lambda : ( # Params •=> ( Statement ) ) «$»
	LambdaCall : ( # Params •=> ( Statement ) ) ( Args ) «$»
}
Transitions:
	=> -> 79


S57{
	Params : Type •id , Params «=>»
	Params : Type •id «=>»
}
Transitions:
	id -> 80


S58{
	Type : num• «id»
}
Transitions:


S59{
	Type : bool• «id»
}
Transitions:


S60{
	Type : char• «id»
}
Transitions:


S61{
	Type : [ •Type ] «id»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	Type -> 81
	num -> 82
	bool -> 83
	char -> 84
	[ -> 85


S62{
	Args : Statement , •Args «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •LambdaCall «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «]»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «]»
}
Transitions:
	Statement -> 23
	id -> 24
	( -> 25
	[ -> 26
	Constant -> 27
	LambdaExpr -> 28
	FunctionCall -> 29
	operations -> 31
	relop -> 32
	Lambda -> 33
	LambdaCall -> 34
	boolean -> 35
	number -> 36
	charac -> 37
	Args -> 86


S63{
	FunctionCall : id ( •Args ) «,»
	FunctionCall : id ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 87


S64{
	Lambda : ( # •Params => ( Statement ) ) «,»
	LambdaCall : ( # •Params => ( Statement ) ) ( Args ) «,»
	Lambda : ( # •Params => ( Statement ) ) «]»
	LambdaCall : ( # •Params => ( Statement ) ) ( Args ) «]»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 57
	num -> 58
	bool -> 59
	char -> 60
	[ -> 61
	Params -> 88


S65{
	Constant : [ Args •] «,»
	Constant : [ Args •] «]»
}
Transitions:
	] -> 89


S66{
	Constant : [ Args ]• «$»
}
Transitions:


S67{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 90


S68{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 91


S69{
	FunctionCall : operations ( Args •) «$»
}
Transitions:
	) -> 92


S70{
	FunctionCall : relop ( Args •) «$»
}
Transitions:
	) -> 93


S71{
	Function : func id :: Params •=> Type ( Statement ) «func»
	Function : func id :: Params •=> Type ( Statement ) «(»
	Function : func id :: Params •=> Type ( Statement ) «[»
	Function : func id :: Params •=> Type ( Statement ) «boolean»
	Function : func id :: Params •=> Type ( Statement ) «charac»
	Function : func id :: Params •=> Type ( Statement ) «id»
	Function : func id :: Params •=> Type ( Statement ) «number»
	Function : func id :: Params •=> Type ( Statement ) «operations»
	Function : func id :: Params •=> Type ( Statement ) «relop»
}
Transitions:
	=> -> 94


S72{
	Args : Statement , •Args «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 95


S73{
	FunctionCall : id ( •Args ) «,»
	FunctionCall : id ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 96


S74{
	Lambda : ( # •Params => ( Statement ) ) «,»
	LambdaCall : ( # •Params => ( Statement ) ) ( Args ) «,»
	Lambda : ( # •Params => ( Statement ) ) «)»
	LambdaCall : ( # •Params => ( Statement ) ) ( Args ) «)»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 57
	num -> 58
	bool -> 59
	char -> 60
	[ -> 61
	Params -> 97


S75{
	Constant : [ Args •] «,»
	Constant : [ Args •] «)»
}
Transitions:
	] -> 98


S76{
	FunctionCall : id ( Args )• «$»
}
Transitions:


S77{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 99


S78{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 100


S79{
	Lambda : ( # Params => •( Statement ) ) «$»
	LambdaCall : ( # Params => •( Statement ) ) ( Args ) «$»
}
Transitions:
	( -> 101


S80{
	Params : Type id •, Params «=>»
	Params : Type id• «=>»
}
Transitions:
	, -> 102


S81{
	Type : [ Type •] «id»
}
Transitions:
	] -> 103


S82{
	Type : num• «]»
}
Transitions:


S83{
	Type : bool• «]»
}
Transitions:


S84{
	Type : char• «]»
}
Transitions:


S85{
	Type : [ •Type ] «]»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	num -> 82
	bool -> 83
	char -> 84
	[ -> 85
	Type -> 104


S86{
	Args : Statement , Args• «]»
}
Transitions:


S87{
	FunctionCall : id ( Args •) «,»
	FunctionCall : id ( Args •) «]»
}
Transitions:
	) -> 105


S88{
	Lambda : ( # Params •=> ( Statement ) ) «,»
	LambdaCall : ( # Params •=> ( Statement ) ) ( Args ) «,»
	Lambda : ( # Params •=> ( Statement ) ) «]»
	LambdaCall : ( # Params •=> ( Statement ) ) ( Args ) «]»
}
Transitions:
	=> -> 106


S89{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «]»
}
Transitions:


S90{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «]»
}
Transitions:
	) -> 107


S91{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «]»
}
Transitions:
	) -> 108


S92{
	FunctionCall : operations ( Args )• «$»
}
Transitions:


S93{
	FunctionCall : relop ( Args )• «$»
}
Transitions:


S94{
	Function : func id :: Params => •Type ( Statement ) «func»
	Function : func id :: Params => •Type ( Statement ) «(»
	Function : func id :: Params => •Type ( Statement ) «[»
	Function : func id :: Params => •Type ( Statement ) «boolean»
	Function : func id :: Params => •Type ( Statement ) «charac»
	Function : func id :: Params => •Type ( Statement ) «id»
	Function : func id :: Params => •Type ( Statement ) «number»
	Function : func id :: Params => •Type ( Statement ) «operations»
	Function : func id :: Params => •Type ( Statement ) «relop»
	Type : •num «(»
	Type : •bool «(»
	Type : •char «(»
	Type : •[ Type ] «(»
}
Transitions:
	Type -> 109
	num -> 110
	bool -> 111
	char -> 112
	[ -> 113


S95{
	Args : Statement , Args• «)»
}
Transitions:


S96{
	FunctionCall : id ( Args •) «,»
	FunctionCall : id ( Args •) «)»
}
Transitions:
	) -> 114


S97{
	Lambda : ( # Params •=> ( Statement ) ) «,»
	LambdaCall : ( # Params •=> ( Statement ) ) ( Args ) «,»
	Lambda : ( # Params •=> ( Statement ) ) «)»
	LambdaCall : ( # Params •=> ( Statement ) ) ( Args ) «)»
}
Transitions:
	=> -> 115


S98{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «)»
}
Transitions:


S99{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «)»
}
Transitions:
	) -> 116


S100{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «)»
}
Transitions:
	) -> 117


S101{
	Lambda : ( # Params => ( •Statement ) ) «$»
	LambdaCall : ( # Params => ( •Statement ) ) ( Args ) «$»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 118
	id -> 119
	( -> 120
	[ -> 121
	Constant -> 122
	LambdaExpr -> 123
	FunctionCall -> 124
	operations -> 125
	relop -> 126
	Lambda -> 127
	LambdaCall -> 128
	boolean -> 129
	number -> 130
	charac -> 131


S102{
	Params : Type id , •Params «=>»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 57
	num -> 58
	bool -> 59
	char -> 60
	[ -> 61
	Params -> 132


S103{
	Type : [ Type ]• «id»
}
Transitions:


S104{
	Type : [ Type •] «]»
}
Transitions:
	] -> 133


S105{
	FunctionCall : id ( Args )• «,»
	FunctionCall : id ( Args )• «]»
}
Transitions:


S106{
	Lambda : ( # Params => •( Statement ) ) «,»
	LambdaCall : ( # Params => •( Statement ) ) ( Args ) «,»
	Lambda : ( # Params => •( Statement ) ) «]»
	LambdaCall : ( # Params => •( Statement ) ) ( Args ) «]»
}
Transitions:
	( -> 134


S107{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «]»
}
Transitions:


S108{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «]»
}
Transitions:


S109{
	Function : func id :: Params => Type •( Statement ) «func»
	Function : func id :: Params => Type •( Statement ) «(»
	Function : func id :: Params => Type •( Statement ) «[»
	Function : func id :: Params => Type •( Statement ) «boolean»
	Function : func id :: Params => Type •( Statement ) «charac»
	Function : func id :: Params => Type •( Statement ) «id»
	Function : func id :: Params => Type •( Statement ) «number»
	Function : func id :: Params => Type •( Statement ) «operations»
	Function : func id :: Params => Type •( Statement ) «relop»
}
Transitions:
	( -> 135


S110{
	Type : num• «(»
}
Transitions:


S111{
	Type : bool• «(»
}
Transitions:


S112{
	Type : char• «(»
}
Transitions:


S113{
	Type : [ •Type ] «(»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	num -> 82
	bool -> 83
	char -> 84
	[ -> 85
	Type -> 136


S114{
	FunctionCall : id ( Args )• «,»
	FunctionCall : id ( Args )• «)»
}
Transitions:


S115{
	Lambda : ( # Params => •( Statement ) ) «,»
	LambdaCall : ( # Params => •( Statement ) ) ( Args ) «,»
	Lambda : ( # Params => •( Statement ) ) «)»
	LambdaCall : ( # Params => •( Statement ) ) ( Args ) «)»
}
Transitions:
	( -> 137


S116{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «)»
}
Transitions:


S117{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «)»
}
Transitions:


S118{
	Lambda : ( # Params => ( Statement •) ) «$»
	LambdaCall : ( # Params => ( Statement •) ) ( Args ) «$»
}
Transitions:
	) -> 138


S119{
	Statement : id• «)»
	FunctionCall : id •( Args ) «)»
}
Transitions:
	( -> 139


S120{
	Lambda : ( •# Params => ( Statement ) ) «)»
	LambdaCall : ( •# Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	# -> 140


S121{
	Constant : [ •Args ] «)»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •LambdaCall «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «]»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «]»
}
Transitions:
	Statement -> 23
	id -> 24
	( -> 25
	[ -> 26
	Constant -> 27
	LambdaExpr -> 28
	FunctionCall -> 29
	operations -> 31
	relop -> 32
	Lambda -> 33
	LambdaCall -> 34
	boolean -> 35
	number -> 36
	charac -> 37
	Args -> 141


S122{
	Statement : Constant• «)»
}
Transitions:


S123{
	Statement : LambdaExpr• «)»
}
Transitions:


S124{
	Statement : FunctionCall• «)»
}
Transitions:


S125{
	FunctionCall : operations •( Args ) «)»
}
Transitions:
	( -> 142


S126{
	FunctionCall : relop •( Args ) «)»
}
Transitions:
	( -> 143


S127{
	LambdaExpr : Lambda• «)»
}
Transitions:


S128{
	LambdaExpr : LambdaCall• «)»
}
Transitions:


S129{
	Constant : boolean• «)»
}
Transitions:


S130{
	Constant : number• «)»
}
Transitions:


S131{
	Constant : charac• «)»
}
Transitions:


S132{
	Params : Type id , Params• «=>»
}
Transitions:


S133{
	Type : [ Type ]• «]»
}
Transitions:


S134{
	Lambda : ( # Params => ( •Statement ) ) «,»
	LambdaCall : ( # Params => ( •Statement ) ) ( Args ) «,»
	Lambda : ( # Params => ( •Statement ) ) «]»
	LambdaCall : ( # Params => ( •Statement ) ) ( Args ) «]»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	id -> 119
	( -> 120
	[ -> 121
	Constant -> 122
	LambdaExpr -> 123
	FunctionCall -> 124
	operations -> 125
	relop -> 126
	Lambda -> 127
	LambdaCall -> 128
	boolean -> 129
	number -> 130
	charac -> 131
	Statement -> 144


S135{
	Function : func id :: Params => Type ( •Statement ) «func»
	Function : func id :: Params => Type ( •Statement ) «(»
	Function : func id :: Params => Type ( •Statement ) «[»
	Function : func id :: Params => Type ( •Statement ) «boolean»
	Function : func id :: Params => Type ( •Statement ) «charac»
	Function : func id :: Params => Type ( •Statement ) «id»
	Function : func id :: Params => Type ( •Statement ) «number»
	Function : func id :: Params => Type ( •Statement ) «operations»
	Function : func id :: Params => Type ( •Statement ) «relop»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	id -> 119
	( -> 120
	[ -> 121
	Constant -> 122
	LambdaExpr -> 123
	FunctionCall -> 124
	operations -> 125
	relop -> 126
	Lambda -> 127
	LambdaCall -> 128
	boolean -> 129
	number -> 130
	charac -> 131
	Statement -> 145


S136{
	Type : [ Type •] «(»
}
Transitions:
	] -> 146


S137{
	Lambda : ( # Params => ( •Statement ) ) «,»
	LambdaCall : ( # Params => ( •Statement ) ) ( Args ) «,»
	Lambda : ( # Params => ( •Statement ) ) «)»
	LambdaCall : ( # Params => ( •Statement ) ) ( Args ) «)»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	id -> 119
	( -> 120
	[ -> 121
	Constant -> 122
	LambdaExpr -> 123
	FunctionCall -> 124
	operations -> 125
	relop -> 126
	Lambda -> 127
	LambdaCall -> 128
	boolean -> 129
	number -> 130
	charac -> 131
	Statement -> 147


S138{
	Lambda : ( # Params => ( Statement ) •) «$»
	LambdaCall : ( # Params => ( Statement ) •) ( Args ) «$»
}
Transitions:
	) -> 148


S139{
	FunctionCall : id ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 149


S140{
	Lambda : ( # •Params => ( Statement ) ) «)»
	LambdaCall : ( # •Params => ( Statement ) ) ( Args ) «)»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 57
	num -> 58
	bool -> 59
	char -> 60
	[ -> 61
	Params -> 150


S141{
	Constant : [ Args •] «)»
}
Transitions:
	] -> 151


S142{
	FunctionCall : operations ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 152


S143{
	FunctionCall : relop ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 153


S144{
	Lambda : ( # Params => ( Statement •) ) «,»
	LambdaCall : ( # Params => ( Statement •) ) ( Args ) «,»
	Lambda : ( # Params => ( Statement •) ) «]»
	LambdaCall : ( # Params => ( Statement •) ) ( Args ) «]»
}
Transitions:
	) -> 154


S145{
	Function : func id :: Params => Type ( Statement •) «func»
	Function : func id :: Params => Type ( Statement •) «(»
	Function : func id :: Params => Type ( Statement •) «[»
	Function : func id :: Params => Type ( Statement •) «boolean»
	Function : func id :: Params => Type ( Statement •) «charac»
	Function : func id :: Params => Type ( Statement •) «id»
	Function : func id :: Params => Type ( Statement •) «number»
	Function : func id :: Params => Type ( Statement •) «operations»
	Function : func id :: Params => Type ( Statement •) «relop»
}
Transitions:
	) -> 155


S146{
	Type : [ Type ]• «(»
}
Transitions:


S147{
	Lambda : ( # Params => ( Statement •) ) «,»
	LambdaCall : ( # Params => ( Statement •) ) ( Args ) «,»
	Lambda : ( # Params => ( Statement •) ) «)»
	LambdaCall : ( # Params => ( Statement •) ) ( Args ) «)»
}
Transitions:
	) -> 156


S148{
	Lambda : ( # Params => ( Statement ) )• «$»
	LambdaCall : ( # Params => ( Statement ) ) •( Args ) «$»
}
Transitions:
	( -> 157


S149{
	FunctionCall : id ( Args •) «)»
}
Transitions:
	) -> 158


S150{
	Lambda : ( # Params •=> ( Statement ) ) «)»
	LambdaCall : ( # Params •=> ( Statement ) ) ( Args ) «)»
}
Transitions:
	=> -> 159


S151{
	Constant : [ Args ]• «)»
}
Transitions:


S152{
	FunctionCall : operations ( Args •) «)»
}
Transitions:
	) -> 160


S153{
	FunctionCall : relop ( Args •) «)»
}
Transitions:
	) -> 161


S154{
	Lambda : ( # Params => ( Statement ) •) «,»
	LambdaCall : ( # Params => ( Statement ) •) ( Args ) «,»
	Lambda : ( # Params => ( Statement ) •) «]»
	LambdaCall : ( # Params => ( Statement ) •) ( Args ) «]»
}
Transitions:
	) -> 162


S155{
	Function : func id :: Params => Type ( Statement )• «func»
	Function : func id :: Params => Type ( Statement )• «(»
	Function : func id :: Params => Type ( Statement )• «[»
	Function : func id :: Params => Type ( Statement )• «boolean»
	Function : func id :: Params => Type ( Statement )• «charac»
	Function : func id :: Params => Type ( Statement )• «id»
	Function : func id :: Params => Type ( Statement )• «number»
	Function : func id :: Params => Type ( Statement )• «operations»
	Function : func id :: Params => Type ( Statement )• «relop»
}
Transitions:


S156{
	Lambda : ( # Params => ( Statement ) •) «,»
	LambdaCall : ( # Params => ( Statement ) •) ( Args ) «,»
	Lambda : ( # Params => ( Statement ) •) «)»
	LambdaCall : ( # Params => ( Statement ) •) ( Args ) «)»
}
Transitions:
	) -> 163


S157{
	LambdaCall : ( # Params => ( Statement ) ) ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 164


S158{
	FunctionCall : id ( Args )• «)»
}
Transitions:


S159{
	Lambda : ( # Params => •( Statement ) ) «)»
	LambdaCall : ( # Params => •( Statement ) ) ( Args ) «)»
}
Transitions:
	( -> 165


S160{
	FunctionCall : operations ( Args )• «)»
}
Transitions:


S161{
	FunctionCall : relop ( Args )• «)»
}
Transitions:


S162{
	Lambda : ( # Params => ( Statement ) )• «,»
	LambdaCall : ( # Params => ( Statement ) ) •( Args ) «,»
	Lambda : ( # Params => ( Statement ) )• «]»
	LambdaCall : ( # Params => ( Statement ) ) •( Args ) «]»
}
Transitions:
	( -> 166


S163{
	Lambda : ( # Params => ( Statement ) )• «,»
	LambdaCall : ( # Params => ( Statement ) ) •( Args ) «,»
	Lambda : ( # Params => ( Statement ) )• «)»
	LambdaCall : ( # Params => ( Statement ) ) •( Args ) «)»
}
Transitions:
	( -> 167


S164{
	LambdaCall : ( # Params => ( Statement ) ) ( Args •) «$»
}
Transitions:
	) -> 168


S165{
	Lambda : ( # Params => ( •Statement ) ) «)»
	LambdaCall : ( # Params => ( •Statement ) ) ( Args ) «)»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	id -> 119
	( -> 120
	[ -> 121
	Constant -> 122
	LambdaExpr -> 123
	FunctionCall -> 124
	operations -> 125
	relop -> 126
	Lambda -> 127
	LambdaCall -> 128
	boolean -> 129
	number -> 130
	charac -> 131
	Statement -> 169


S166{
	LambdaCall : ( # Params => ( Statement ) ) ( •Args ) «,»
	LambdaCall : ( # Params => ( Statement ) ) ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 170


S167{
	LambdaCall : ( # Params => ( Statement ) ) ( •Args ) «,»
	LambdaCall : ( # Params => ( Statement ) ) ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 171


S168{
	LambdaCall : ( # Params => ( Statement ) ) ( Args )• «$»
}
Transitions:


S169{
	Lambda : ( # Params => ( Statement •) ) «)»
	LambdaCall : ( # Params => ( Statement •) ) ( Args ) «)»
}
Transitions:
	) -> 172


S170{
	LambdaCall : ( # Params => ( Statement ) ) ( Args •) «,»
	LambdaCall : ( # Params => ( Statement ) ) ( Args •) «]»
}
Transitions:
	) -> 173


S171{
	LambdaCall : ( # Params => ( Statement ) ) ( Args •) «,»
	LambdaCall : ( # Params => ( Statement ) ) ( Args •) «)»
}
Transitions:
	) -> 174


S172{
	Lambda : ( # Params => ( Statement ) •) «)»
	LambdaCall : ( # Params => ( Statement ) •) ( Args ) «)»
}
Transitions:
	) -> 175


S173{
	LambdaCall : ( # Params => ( Statement ) ) ( Args )• «,»
	LambdaCall : ( # Params => ( Statement ) ) ( Args )• «]»
}
Transitions:


S174{
	LambdaCall : ( # Params => ( Statement ) ) ( Args )• «,»
	LambdaCall : ( # Params => ( Statement ) ) ( Args )• «)»
}
Transitions:


S175{
	Lambda : ( # Params => ( Statement ) )• «)»
	LambdaCall : ( # Params => ( Statement ) ) •( Args ) «)»
}
Transitions:
	( -> 176


S176{
	LambdaCall : ( # Params => ( Statement ) ) ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •LambdaCall «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •LambdaCall «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «,»
	Lambda : •( # Params => ( Statement ) ) «)»
	LambdaCall : •( # Params => ( Statement ) ) ( Args ) «)»
}
Transitions:
	Statement -> 41
	id -> 42
	( -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	FunctionCall -> 47
	operations -> 49
	relop -> 50
	Lambda -> 51
	LambdaCall -> 52
	boolean -> 53
	number -> 54
	charac -> 55
	Args -> 177


S177{
	LambdaCall : ( # Params => ( Statement ) ) ( Args •) «)»
}
Transitions:
	) -> 178


S178{
	LambdaCall : ( # Params => ( Statement ) ) ( Args )• «)»
}
Transitions:


