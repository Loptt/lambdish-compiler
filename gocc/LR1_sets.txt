S0{
	S' : •Program «$»
	Program : •Functions Statement «$»
	Functions : •Function Functions «(»
	Functions : •Function Functions «[»
	Functions : •Function Functions «boolean»
	Functions : •Function Functions «charac»
	Functions : •Function Functions «id»
	Functions : •Function Functions «number»
	Functions : •Function Functions «operations»
	Functions : •Function Functions «relop»
	Functions : •Function Functions «string»
	Functions : •Function «(»
	Functions : •Function «[»
	Functions : •Function «boolean»
	Functions : •Function «charac»
	Functions : •Function «id»
	Functions : •Function «number»
	Functions : •Function «operations»
	Functions : •Function «relop»
	Functions : •Function «string»
	Functions : empty• «(»
	Functions : empty• «[»
	Functions : empty• «boolean»
	Functions : empty• «charac»
	Functions : empty• «id»
	Functions : empty• «number»
	Functions : empty• «operations»
	Functions : empty• «relop»
	Functions : empty• «string»
	Function : •func id :: Params => Type ( Statement ) «(»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «[»
	Function : •func id :: Params => Type ( Statement ) «boolean»
	Function : •func id :: Params => Type ( Statement ) «charac»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «number»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
	Function : •func id :: Params => Type ( Statement ) «string»
}
Transitions:
	Program -> 1
	Functions -> 2
	Function -> 3
	func -> 4


S1{
	S' : Program• «$»
}
Transitions:


S2{
	Program : Functions •Statement «$»
	Statement : •id «$»
	Statement : •Constant «$»
	Statement : •Lambda «$»
	Statement : •FunctionCall «$»
	Constant : •boolean «$»
	Constant : •number «$»
	Constant : •charac «$»
	Constant : •string «$»
	Constant : •[ ConstantArgs ] «$»
	Constant : •[ Type ] «$»
	Lambda : •( # Params => Type ( Statement ) ) «$»
	FunctionCall : •Statement ( Args ) «$»
	FunctionCall : •operations ( Args ) «$»
	FunctionCall : •relop ( Args ) «$»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 5
	id -> 6
	( -> 7
	[ -> 8
	Constant -> 9
	Lambda -> 10
	FunctionCall -> 11
	operations -> 12
	relop -> 13
	boolean -> 14
	number -> 15
	charac -> 16
	string -> 17


S3{
	Functions : Function •Functions «(»
	Functions : Function •Functions «[»
	Functions : Function •Functions «boolean»
	Functions : Function •Functions «charac»
	Functions : Function •Functions «id»
	Functions : Function •Functions «number»
	Functions : Function •Functions «operations»
	Functions : Function •Functions «relop»
	Functions : Function •Functions «string»
	Functions : Function• «(»
	Functions : Function• «[»
	Functions : Function• «boolean»
	Functions : Function• «charac»
	Functions : Function• «id»
	Functions : Function• «number»
	Functions : Function• «operations»
	Functions : Function• «relop»
	Functions : Function• «string»
	Functions : •Function Functions «(»
	Functions : •Function «(»
	Functions : empty• «(»
	Functions : •Function Functions «[»
	Functions : •Function «[»
	Functions : empty• «[»
	Functions : •Function Functions «boolean»
	Functions : •Function «boolean»
	Functions : empty• «boolean»
	Functions : •Function Functions «charac»
	Functions : •Function «charac»
	Functions : empty• «charac»
	Functions : •Function Functions «id»
	Functions : •Function «id»
	Functions : empty• «id»
	Functions : •Function Functions «number»
	Functions : •Function «number»
	Functions : empty• «number»
	Functions : •Function Functions «operations»
	Functions : •Function «operations»
	Functions : empty• «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «relop»
	Functions : empty• «relop»
	Functions : •Function Functions «string»
	Functions : •Function «string»
	Functions : empty• «string»
	Function : •func id :: Params => Type ( Statement ) «(»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «[»
	Function : •func id :: Params => Type ( Statement ) «boolean»
	Function : •func id :: Params => Type ( Statement ) «charac»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «number»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
	Function : •func id :: Params => Type ( Statement ) «string»
}
Transitions:
	Function -> 3
	func -> 4
	Functions -> 18


S4{
	Function : func •id :: Params => Type ( Statement ) «(»
	Function : func •id :: Params => Type ( Statement ) «func»
	Function : func •id :: Params => Type ( Statement ) «[»
	Function : func •id :: Params => Type ( Statement ) «boolean»
	Function : func •id :: Params => Type ( Statement ) «charac»
	Function : func •id :: Params => Type ( Statement ) «id»
	Function : func •id :: Params => Type ( Statement ) «number»
	Function : func •id :: Params => Type ( Statement ) «operations»
	Function : func •id :: Params => Type ( Statement ) «relop»
	Function : func •id :: Params => Type ( Statement ) «string»
}
Transitions:
	id -> 19


S5{
	Program : Functions Statement• «$»
	FunctionCall : Statement •( Args ) «$»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 20


S6{
	Statement : id• «$»
	Statement : id• «(»
}
Transitions:


S7{
	Lambda : ( •# Params => Type ( Statement ) ) «$»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 21


S8{
	Constant : [ •ConstantArgs ] «$»
	Constant : [ •Type ] «$»
	Constant : [ •ConstantArgs ] «(»
	Constant : [ •Type ] «(»
	ConstantArgs : •Statement , Args «]»
	ConstantArgs : •Statement «]»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 22
	id -> 23
	Type -> 24
	( -> 25
	BasicType -> 26
	[ -> 27
	num -> 28
	bool -> 29
	char -> 30
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	ConstantArgs -> 40


S9{
	Statement : Constant• «$»
	Statement : Constant• «(»
}
Transitions:


S10{
	Statement : Lambda• «$»
	Statement : Lambda• «(»
}
Transitions:


S11{
	Statement : FunctionCall• «$»
	Statement : FunctionCall• «(»
}
Transitions:


S12{
	FunctionCall : operations •( Args ) «$»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 41


S13{
	FunctionCall : relop •( Args ) «$»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 42


S14{
	Constant : boolean• «$»
	Constant : boolean• «(»
}
Transitions:


S15{
	Constant : number• «$»
	Constant : number• «(»
}
Transitions:


S16{
	Constant : charac• «$»
	Constant : charac• «(»
}
Transitions:


S17{
	Constant : string• «$»
	Constant : string• «(»
}
Transitions:


S18{
	Functions : Function Functions• «(»
	Functions : Function Functions• «[»
	Functions : Function Functions• «boolean»
	Functions : Function Functions• «charac»
	Functions : Function Functions• «id»
	Functions : Function Functions• «number»
	Functions : Function Functions• «operations»
	Functions : Function Functions• «relop»
	Functions : Function Functions• «string»
}
Transitions:


S19{
	Function : func id •:: Params => Type ( Statement ) «(»
	Function : func id •:: Params => Type ( Statement ) «func»
	Function : func id •:: Params => Type ( Statement ) «[»
	Function : func id •:: Params => Type ( Statement ) «boolean»
	Function : func id •:: Params => Type ( Statement ) «charac»
	Function : func id •:: Params => Type ( Statement ) «id»
	Function : func id •:: Params => Type ( Statement ) «number»
	Function : func id •:: Params => Type ( Statement ) «operations»
	Function : func id •:: Params => Type ( Statement ) «relop»
	Function : func id •:: Params => Type ( Statement ) «string»
}
Transitions:
	:: -> 43


S20{
	FunctionCall : Statement ( •Args ) «$»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	Args -> 51
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57


S21{
	Lambda : ( # •Params => Type ( Statement ) ) «$»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Params -> 58
	Type -> 59
	( -> 60
	BasicType -> 61
	[ -> 62
	num -> 63
	bool -> 64
	char -> 65


S22{
	ConstantArgs : Statement •, Args «]»
	ConstantArgs : Statement• «]»
	FunctionCall : Statement •( Args ) «,»
	FunctionCall : Statement •( Args ) «]»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 66
	, -> 67


S23{
	Statement : id• «,»
	Statement : id• «]»
	Statement : id• «(»
}
Transitions:


S24{
	Constant : [ Type •] «$»
	Constant : [ Type •] «(»
}
Transitions:
	] -> 68


S25{
	Type : ( •FuncTypes => Type ) «]»
	Lambda : ( •# Params => Type ( Statement ) ) «,»
	Lambda : ( •# Params => Type ( Statement ) ) «]»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	FuncTypes -> 72
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76
	# -> 77


S26{
	Type : BasicType• «]»
}
Transitions:


S27{
	Type : [ •Type ] «]»
	Constant : [ •ConstantArgs ] «,»
	Constant : [ •Type ] «,»
	Constant : [ •ConstantArgs ] «]»
	Constant : [ •Type ] «]»
	Constant : [ •ConstantArgs ] «(»
	Constant : [ •Type ] «(»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	ConstantArgs : •Statement , Args «]»
	ConstantArgs : •Statement «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 22
	id -> 23
	( -> 25
	BasicType -> 26
	[ -> 27
	num -> 28
	bool -> 29
	char -> 30
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	Type -> 78
	ConstantArgs -> 79


S28{
	BasicType : num• «]»
}
Transitions:


S29{
	BasicType : bool• «]»
}
Transitions:


S30{
	BasicType : char• «]»
}
Transitions:


S31{
	Statement : Constant• «,»
	Statement : Constant• «]»
	Statement : Constant• «(»
}
Transitions:


S32{
	Statement : Lambda• «,»
	Statement : Lambda• «]»
	Statement : Lambda• «(»
}
Transitions:


S33{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «]»
	Statement : FunctionCall• «(»
}
Transitions:


S34{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «]»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 80


S35{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «]»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 81


S36{
	Constant : boolean• «,»
	Constant : boolean• «]»
	Constant : boolean• «(»
}
Transitions:


S37{
	Constant : number• «,»
	Constant : number• «]»
	Constant : number• «(»
}
Transitions:


S38{
	Constant : charac• «,»
	Constant : charac• «]»
	Constant : charac• «(»
}
Transitions:


S39{
	Constant : string• «,»
	Constant : string• «]»
	Constant : string• «(»
}
Transitions:


S40{
	Constant : [ ConstantArgs •] «$»
	Constant : [ ConstantArgs •] «(»
}
Transitions:
	] -> 82


S41{
	FunctionCall : operations ( •Args ) «$»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 83


S42{
	FunctionCall : relop ( •Args ) «$»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 84


S43{
	Function : func id :: •Params => Type ( Statement ) «(»
	Function : func id :: •Params => Type ( Statement ) «func»
	Function : func id :: •Params => Type ( Statement ) «[»
	Function : func id :: •Params => Type ( Statement ) «boolean»
	Function : func id :: •Params => Type ( Statement ) «charac»
	Function : func id :: •Params => Type ( Statement ) «id»
	Function : func id :: •Params => Type ( Statement ) «number»
	Function : func id :: •Params => Type ( Statement ) «operations»
	Function : func id :: •Params => Type ( Statement ) «relop»
	Function : func id :: •Params => Type ( Statement ) «string»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 59
	( -> 60
	BasicType -> 61
	[ -> 62
	num -> 63
	bool -> 64
	char -> 65
	Params -> 85


S44{
	Args : Statement •, Args «)»
	Args : Statement• «)»
	FunctionCall : Statement •( Args ) «,»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 86
	, -> 87


S45{
	Statement : id• «,»
	Statement : id• «)»
	Statement : id• «(»
}
Transitions:


S46{
	Lambda : ( •# Params => Type ( Statement ) ) «,»
	Lambda : ( •# Params => Type ( Statement ) ) «)»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 88


S47{
	Constant : [ •ConstantArgs ] «,»
	Constant : [ •Type ] «,»
	Constant : [ •ConstantArgs ] «)»
	Constant : [ •Type ] «)»
	Constant : [ •ConstantArgs ] «(»
	Constant : [ •Type ] «(»
	ConstantArgs : •Statement , Args «]»
	ConstantArgs : •Statement «]»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 22
	id -> 23
	( -> 25
	BasicType -> 26
	[ -> 27
	num -> 28
	bool -> 29
	char -> 30
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	Type -> 89
	ConstantArgs -> 90


S48{
	Statement : Constant• «,»
	Statement : Constant• «)»
	Statement : Constant• «(»
}
Transitions:


S49{
	Statement : Lambda• «,»
	Statement : Lambda• «)»
	Statement : Lambda• «(»
}
Transitions:


S50{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «)»
	Statement : FunctionCall• «(»
}
Transitions:


S51{
	FunctionCall : Statement ( Args •) «$»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 91


S52{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «)»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 92


S53{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «)»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 93


S54{
	Constant : boolean• «,»
	Constant : boolean• «)»
	Constant : boolean• «(»
}
Transitions:


S55{
	Constant : number• «,»
	Constant : number• «)»
	Constant : number• «(»
}
Transitions:


S56{
	Constant : charac• «,»
	Constant : charac• «)»
	Constant : charac• «(»
}
Transitions:


S57{
	Constant : string• «,»
	Constant : string• «)»
	Constant : string• «(»
}
Transitions:


S58{
	Lambda : ( # Params •=> Type ( Statement ) ) «$»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 94


S59{
	Params : Type •id , Params «=>»
	Params : Type •id «=>»
}
Transitions:
	id -> 95


S60{
	Type : ( •FuncTypes => Type ) «id»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76
	FuncTypes -> 96


S61{
	Type : BasicType• «id»
}
Transitions:


S62{
	Type : [ •Type ] «id»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	BasicType -> 26
	num -> 28
	bool -> 29
	char -> 30
	Type -> 97
	( -> 98
	[ -> 99


S63{
	BasicType : num• «id»
}
Transitions:


S64{
	BasicType : bool• «id»
}
Transitions:


S65{
	BasicType : char• «id»
}
Transitions:


S66{
	FunctionCall : Statement ( •Args ) «,»
	FunctionCall : Statement ( •Args ) «]»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 100


S67{
	ConstantArgs : Statement , •Args «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 23
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	Statement -> 101
	( -> 102
	[ -> 103
	Args -> 104


S68{
	Constant : [ Type ]• «$»
	Constant : [ Type ]• «(»
}
Transitions:


S69{
	FuncTypes : Type •, FuncTypes «=>»
	FuncTypes : Type• «=>»
}
Transitions:
	, -> 105


S70{
	Type : ( •FuncTypes => Type ) «,»
	Type : ( •FuncTypes => Type ) «=>»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76
	FuncTypes -> 106


S71{
	Type : BasicType• «,»
	Type : BasicType• «=>»
}
Transitions:


S72{
	Type : ( FuncTypes •=> Type ) «]»
}
Transitions:
	=> -> 107


S73{
	Type : [ •Type ] «,»
	Type : [ •Type ] «=>»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	BasicType -> 26
	num -> 28
	bool -> 29
	char -> 30
	( -> 98
	[ -> 99
	Type -> 108


S74{
	BasicType : num• «,»
	BasicType : num• «=>»
}
Transitions:


S75{
	BasicType : bool• «,»
	BasicType : bool• «=>»
}
Transitions:


S76{
	BasicType : char• «,»
	BasicType : char• «=>»
}
Transitions:


S77{
	Lambda : ( # •Params => Type ( Statement ) ) «,»
	Lambda : ( # •Params => Type ( Statement ) ) «]»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 59
	( -> 60
	BasicType -> 61
	[ -> 62
	num -> 63
	bool -> 64
	char -> 65
	Params -> 109


S78{
	Type : [ Type •] «]»
	Constant : [ Type •] «,»
	Constant : [ Type •] «]»
	Constant : [ Type •] «(»
}
Transitions:
	] -> 110


S79{
	Constant : [ ConstantArgs •] «,»
	Constant : [ ConstantArgs •] «]»
	Constant : [ ConstantArgs •] «(»
}
Transitions:
	] -> 111


S80{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «]»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 112


S81{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «]»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 113


S82{
	Constant : [ ConstantArgs ]• «$»
	Constant : [ ConstantArgs ]• «(»
}
Transitions:


S83{
	FunctionCall : operations ( Args •) «$»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 114


S84{
	FunctionCall : relop ( Args •) «$»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 115


S85{
	Function : func id :: Params •=> Type ( Statement ) «(»
	Function : func id :: Params •=> Type ( Statement ) «func»
	Function : func id :: Params •=> Type ( Statement ) «[»
	Function : func id :: Params •=> Type ( Statement ) «boolean»
	Function : func id :: Params •=> Type ( Statement ) «charac»
	Function : func id :: Params •=> Type ( Statement ) «id»
	Function : func id :: Params •=> Type ( Statement ) «number»
	Function : func id :: Params •=> Type ( Statement ) «operations»
	Function : func id :: Params •=> Type ( Statement ) «relop»
	Function : func id :: Params •=> Type ( Statement ) «string»
}
Transitions:
	=> -> 116


S86{
	FunctionCall : Statement ( •Args ) «,»
	FunctionCall : Statement ( •Args ) «)»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 117


S87{
	Args : Statement , •Args «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 118


S88{
	Lambda : ( # •Params => Type ( Statement ) ) «,»
	Lambda : ( # •Params => Type ( Statement ) ) «)»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 59
	( -> 60
	BasicType -> 61
	[ -> 62
	num -> 63
	bool -> 64
	char -> 65
	Params -> 119


S89{
	Constant : [ Type •] «,»
	Constant : [ Type •] «)»
	Constant : [ Type •] «(»
}
Transitions:
	] -> 120


S90{
	Constant : [ ConstantArgs •] «,»
	Constant : [ ConstantArgs •] «)»
	Constant : [ ConstantArgs •] «(»
}
Transitions:
	] -> 121


S91{
	FunctionCall : Statement ( Args )• «$»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S92{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «)»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 122


S93{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «)»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 123


S94{
	Lambda : ( # Params => •Type ( Statement ) ) «$»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	Type -> 124
	( -> 125
	BasicType -> 126
	[ -> 127
	num -> 128
	bool -> 129
	char -> 130


S95{
	Params : Type id •, Params «=>»
	Params : Type id• «=>»
}
Transitions:
	, -> 131


S96{
	Type : ( FuncTypes •=> Type ) «id»
}
Transitions:
	=> -> 132


S97{
	Type : [ Type •] «id»
}
Transitions:
	] -> 133


S98{
	Type : ( •FuncTypes => Type ) «]»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	FuncTypes -> 72
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76


S99{
	Type : [ •Type ] «]»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	BasicType -> 26
	num -> 28
	bool -> 29
	char -> 30
	( -> 98
	[ -> 99
	Type -> 134


S100{
	FunctionCall : Statement ( Args •) «,»
	FunctionCall : Statement ( Args •) «]»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 135


S101{
	Args : Statement •, Args «]»
	Args : Statement• «]»
	FunctionCall : Statement •( Args ) «,»
	FunctionCall : Statement •( Args ) «]»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 66
	, -> 136


S102{
	Lambda : ( •# Params => Type ( Statement ) ) «,»
	Lambda : ( •# Params => Type ( Statement ) ) «]»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 77


S103{
	Constant : [ •ConstantArgs ] «,»
	Constant : [ •Type ] «,»
	Constant : [ •ConstantArgs ] «]»
	Constant : [ •Type ] «]»
	Constant : [ •ConstantArgs ] «(»
	Constant : [ •Type ] «(»
	ConstantArgs : •Statement , Args «]»
	ConstantArgs : •Statement «]»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 22
	id -> 23
	( -> 25
	BasicType -> 26
	[ -> 27
	num -> 28
	bool -> 29
	char -> 30
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	ConstantArgs -> 79
	Type -> 137


S104{
	ConstantArgs : Statement , Args• «]»
}
Transitions:


S105{
	FuncTypes : Type , •FuncTypes «=>»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76
	FuncTypes -> 138


S106{
	Type : ( FuncTypes •=> Type ) «,»
	Type : ( FuncTypes •=> Type ) «=>»
}
Transitions:
	=> -> 139


S107{
	Type : ( FuncTypes => •Type ) «]»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	Type -> 140
	( -> 141
	BasicType -> 142
	[ -> 143
	num -> 144
	bool -> 145
	char -> 146


S108{
	Type : [ Type •] «,»
	Type : [ Type •] «=>»
}
Transitions:
	] -> 147


S109{
	Lambda : ( # Params •=> Type ( Statement ) ) «,»
	Lambda : ( # Params •=> Type ( Statement ) ) «]»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 148


S110{
	Type : [ Type ]• «]»
	Constant : [ Type ]• «,»
	Constant : [ Type ]• «]»
	Constant : [ Type ]• «(»
}
Transitions:


S111{
	Constant : [ ConstantArgs ]• «,»
	Constant : [ ConstantArgs ]• «]»
	Constant : [ ConstantArgs ]• «(»
}
Transitions:


S112{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «]»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 149


S113{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «]»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 150


S114{
	FunctionCall : operations ( Args )• «$»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S115{
	FunctionCall : relop ( Args )• «$»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S116{
	Function : func id :: Params => •Type ( Statement ) «(»
	Function : func id :: Params => •Type ( Statement ) «func»
	Function : func id :: Params => •Type ( Statement ) «[»
	Function : func id :: Params => •Type ( Statement ) «boolean»
	Function : func id :: Params => •Type ( Statement ) «charac»
	Function : func id :: Params => •Type ( Statement ) «id»
	Function : func id :: Params => •Type ( Statement ) «number»
	Function : func id :: Params => •Type ( Statement ) «operations»
	Function : func id :: Params => •Type ( Statement ) «relop»
	Function : func id :: Params => •Type ( Statement ) «string»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 125
	BasicType -> 126
	[ -> 127
	num -> 128
	bool -> 129
	char -> 130
	Type -> 151


S117{
	FunctionCall : Statement ( Args •) «,»
	FunctionCall : Statement ( Args •) «)»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 152


S118{
	Args : Statement , Args• «)»
}
Transitions:


S119{
	Lambda : ( # Params •=> Type ( Statement ) ) «,»
	Lambda : ( # Params •=> Type ( Statement ) ) «)»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 153


S120{
	Constant : [ Type ]• «,»
	Constant : [ Type ]• «)»
	Constant : [ Type ]• «(»
}
Transitions:


S121{
	Constant : [ ConstantArgs ]• «,»
	Constant : [ ConstantArgs ]• «)»
	Constant : [ ConstantArgs ]• «(»
}
Transitions:


S122{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «)»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 154


S123{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «)»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 155


S124{
	Lambda : ( # Params => Type •( Statement ) ) «$»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 156


S125{
	Type : ( •FuncTypes => Type ) «(»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76
	FuncTypes -> 157


S126{
	Type : BasicType• «(»
}
Transitions:


S127{
	Type : [ •Type ] «(»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	BasicType -> 26
	num -> 28
	bool -> 29
	char -> 30
	( -> 98
	[ -> 99
	Type -> 158


S128{
	BasicType : num• «(»
}
Transitions:


S129{
	BasicType : bool• «(»
}
Transitions:


S130{
	BasicType : char• «(»
}
Transitions:


S131{
	Params : Type id , •Params «=>»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 59
	( -> 60
	BasicType -> 61
	[ -> 62
	num -> 63
	bool -> 64
	char -> 65
	Params -> 159


S132{
	Type : ( FuncTypes => •Type ) «id»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 141
	BasicType -> 142
	[ -> 143
	num -> 144
	bool -> 145
	char -> 146
	Type -> 160


S133{
	Type : [ Type ]• «id»
}
Transitions:


S134{
	Type : [ Type •] «]»
}
Transitions:
	] -> 161


S135{
	FunctionCall : Statement ( Args )• «,»
	FunctionCall : Statement ( Args )• «]»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S136{
	Args : Statement , •Args «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 23
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	Statement -> 101
	( -> 102
	[ -> 103
	Args -> 162


S137{
	Constant : [ Type •] «,»
	Constant : [ Type •] «]»
	Constant : [ Type •] «(»
}
Transitions:
	] -> 163


S138{
	FuncTypes : Type , FuncTypes• «=>»
}
Transitions:


S139{
	Type : ( FuncTypes => •Type ) «,»
	Type : ( FuncTypes => •Type ) «=>»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 141
	BasicType -> 142
	[ -> 143
	num -> 144
	bool -> 145
	char -> 146
	Type -> 164


S140{
	Type : ( FuncTypes => Type •) «]»
}
Transitions:
	) -> 165


S141{
	Type : ( •FuncTypes => Type ) «)»
	FuncTypes : •Type , FuncTypes «=>»
	FuncTypes : •Type «=>»
	FuncTypes : empty• «=>»
	Type : •BasicType «,»
	Type : •( FuncTypes => Type ) «,»
	Type : •[ Type ] «,»
	Type : •BasicType «=>»
	Type : •( FuncTypes => Type ) «=>»
	Type : •[ Type ] «=>»
	BasicType : •num «,»
	BasicType : •bool «,»
	BasicType : •char «,»
	BasicType : •num «=>»
	BasicType : •bool «=>»
	BasicType : •char «=>»
}
Transitions:
	Type -> 69
	( -> 70
	BasicType -> 71
	[ -> 73
	num -> 74
	bool -> 75
	char -> 76
	FuncTypes -> 166


S142{
	Type : BasicType• «)»
}
Transitions:


S143{
	Type : [ •Type ] «)»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
}
Transitions:
	BasicType -> 26
	num -> 28
	bool -> 29
	char -> 30
	( -> 98
	[ -> 99
	Type -> 167


S144{
	BasicType : num• «)»
}
Transitions:


S145{
	BasicType : bool• «)»
}
Transitions:


S146{
	BasicType : char• «)»
}
Transitions:


S147{
	Type : [ Type ]• «,»
	Type : [ Type ]• «=>»
}
Transitions:


S148{
	Lambda : ( # Params => •Type ( Statement ) ) «,»
	Lambda : ( # Params => •Type ( Statement ) ) «]»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 125
	BasicType -> 126
	[ -> 127
	num -> 128
	bool -> 129
	char -> 130
	Type -> 168


S149{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «]»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S150{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «]»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S151{
	Function : func id :: Params => Type •( Statement ) «(»
	Function : func id :: Params => Type •( Statement ) «func»
	Function : func id :: Params => Type •( Statement ) «[»
	Function : func id :: Params => Type •( Statement ) «boolean»
	Function : func id :: Params => Type •( Statement ) «charac»
	Function : func id :: Params => Type •( Statement ) «id»
	Function : func id :: Params => Type •( Statement ) «number»
	Function : func id :: Params => Type •( Statement ) «operations»
	Function : func id :: Params => Type •( Statement ) «relop»
	Function : func id :: Params => Type •( Statement ) «string»
}
Transitions:
	( -> 169


S152{
	FunctionCall : Statement ( Args )• «,»
	FunctionCall : Statement ( Args )• «)»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S153{
	Lambda : ( # Params => •Type ( Statement ) ) «,»
	Lambda : ( # Params => •Type ( Statement ) ) «)»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 125
	BasicType -> 126
	[ -> 127
	num -> 128
	bool -> 129
	char -> 130
	Type -> 170


S154{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «)»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S155{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «)»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S156{
	Lambda : ( # Params => Type ( •Statement ) ) «$»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 171
	id -> 172
	( -> 173
	[ -> 174
	Constant -> 175
	Lambda -> 176
	FunctionCall -> 177
	operations -> 178
	relop -> 179
	boolean -> 180
	number -> 181
	charac -> 182
	string -> 183


S157{
	Type : ( FuncTypes •=> Type ) «(»
}
Transitions:
	=> -> 184


S158{
	Type : [ Type •] «(»
}
Transitions:
	] -> 185


S159{
	Params : Type id , Params• «=>»
}
Transitions:


S160{
	Type : ( FuncTypes => Type •) «id»
}
Transitions:
	) -> 186


S161{
	Type : [ Type ]• «]»
}
Transitions:


S162{
	Args : Statement , Args• «]»
}
Transitions:


S163{
	Constant : [ Type ]• «,»
	Constant : [ Type ]• «]»
	Constant : [ Type ]• «(»
}
Transitions:


S164{
	Type : ( FuncTypes => Type •) «,»
	Type : ( FuncTypes => Type •) «=>»
}
Transitions:
	) -> 187


S165{
	Type : ( FuncTypes => Type )• «]»
}
Transitions:


S166{
	Type : ( FuncTypes •=> Type ) «)»
}
Transitions:
	=> -> 188


S167{
	Type : [ Type •] «)»
}
Transitions:
	] -> 189


S168{
	Lambda : ( # Params => Type •( Statement ) ) «,»
	Lambda : ( # Params => Type •( Statement ) ) «]»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 190


S169{
	Function : func id :: Params => Type ( •Statement ) «(»
	Function : func id :: Params => Type ( •Statement ) «func»
	Function : func id :: Params => Type ( •Statement ) «[»
	Function : func id :: Params => Type ( •Statement ) «boolean»
	Function : func id :: Params => Type ( •Statement ) «charac»
	Function : func id :: Params => Type ( •Statement ) «id»
	Function : func id :: Params => Type ( •Statement ) «number»
	Function : func id :: Params => Type ( •Statement ) «operations»
	Function : func id :: Params => Type ( •Statement ) «relop»
	Function : func id :: Params => Type ( •Statement ) «string»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 172
	( -> 173
	[ -> 174
	Constant -> 175
	Lambda -> 176
	FunctionCall -> 177
	operations -> 178
	relop -> 179
	boolean -> 180
	number -> 181
	charac -> 182
	string -> 183
	Statement -> 191


S170{
	Lambda : ( # Params => Type •( Statement ) ) «,»
	Lambda : ( # Params => Type •( Statement ) ) «)»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 192


S171{
	Lambda : ( # Params => Type ( Statement •) ) «$»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 193
	) -> 194


S172{
	Statement : id• «)»
	Statement : id• «(»
}
Transitions:


S173{
	Lambda : ( •# Params => Type ( Statement ) ) «)»
	Lambda : ( •# Params => Type ( Statement ) ) «(»
}
Transitions:
	# -> 195


S174{
	Constant : [ •ConstantArgs ] «)»
	Constant : [ •Type ] «)»
	Constant : [ •ConstantArgs ] «(»
	Constant : [ •Type ] «(»
	ConstantArgs : •Statement , Args «]»
	ConstantArgs : •Statement «]»
	Type : •BasicType «]»
	Type : •( FuncTypes => Type ) «]»
	Type : •[ Type ] «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	BasicType : •num «]»
	BasicType : •bool «]»
	BasicType : •char «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •string «]»
	Constant : •[ ConstantArgs ] «]»
	Constant : •[ Type ] «]»
	Lambda : •( # Params => Type ( Statement ) ) «]»
	FunctionCall : •Statement ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 22
	id -> 23
	( -> 25
	BasicType -> 26
	[ -> 27
	num -> 28
	bool -> 29
	char -> 30
	Constant -> 31
	Lambda -> 32
	FunctionCall -> 33
	operations -> 34
	relop -> 35
	boolean -> 36
	number -> 37
	charac -> 38
	string -> 39
	Type -> 196
	ConstantArgs -> 197


S175{
	Statement : Constant• «)»
	Statement : Constant• «(»
}
Transitions:


S176{
	Statement : Lambda• «)»
	Statement : Lambda• «(»
}
Transitions:


S177{
	Statement : FunctionCall• «)»
	Statement : FunctionCall• «(»
}
Transitions:


S178{
	FunctionCall : operations •( Args ) «)»
	FunctionCall : operations •( Args ) «(»
}
Transitions:
	( -> 198


S179{
	FunctionCall : relop •( Args ) «)»
	FunctionCall : relop •( Args ) «(»
}
Transitions:
	( -> 199


S180{
	Constant : boolean• «)»
	Constant : boolean• «(»
}
Transitions:


S181{
	Constant : number• «)»
	Constant : number• «(»
}
Transitions:


S182{
	Constant : charac• «)»
	Constant : charac• «(»
}
Transitions:


S183{
	Constant : string• «)»
	Constant : string• «(»
}
Transitions:


S184{
	Type : ( FuncTypes => •Type ) «(»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 141
	BasicType -> 142
	[ -> 143
	num -> 144
	bool -> 145
	char -> 146
	Type -> 200


S185{
	Type : [ Type ]• «(»
}
Transitions:


S186{
	Type : ( FuncTypes => Type )• «id»
}
Transitions:


S187{
	Type : ( FuncTypes => Type )• «,»
	Type : ( FuncTypes => Type )• «=>»
}
Transitions:


S188{
	Type : ( FuncTypes => •Type ) «)»
	Type : •BasicType «)»
	Type : •( FuncTypes => Type ) «)»
	Type : •[ Type ] «)»
	BasicType : •num «)»
	BasicType : •bool «)»
	BasicType : •char «)»
}
Transitions:
	( -> 141
	BasicType -> 142
	[ -> 143
	num -> 144
	bool -> 145
	char -> 146
	Type -> 201


S189{
	Type : [ Type ]• «)»
}
Transitions:


S190{
	Lambda : ( # Params => Type ( •Statement ) ) «,»
	Lambda : ( # Params => Type ( •Statement ) ) «]»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 172
	( -> 173
	[ -> 174
	Constant -> 175
	Lambda -> 176
	FunctionCall -> 177
	operations -> 178
	relop -> 179
	boolean -> 180
	number -> 181
	charac -> 182
	string -> 183
	Statement -> 202


S191{
	Function : func id :: Params => Type ( Statement •) «(»
	Function : func id :: Params => Type ( Statement •) «func»
	Function : func id :: Params => Type ( Statement •) «[»
	Function : func id :: Params => Type ( Statement •) «boolean»
	Function : func id :: Params => Type ( Statement •) «charac»
	Function : func id :: Params => Type ( Statement •) «id»
	Function : func id :: Params => Type ( Statement •) «number»
	Function : func id :: Params => Type ( Statement •) «operations»
	Function : func id :: Params => Type ( Statement •) «relop»
	Function : func id :: Params => Type ( Statement •) «string»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 193
	) -> 203


S192{
	Lambda : ( # Params => Type ( •Statement ) ) «,»
	Lambda : ( # Params => Type ( •Statement ) ) «)»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 172
	( -> 173
	[ -> 174
	Constant -> 175
	Lambda -> 176
	FunctionCall -> 177
	operations -> 178
	relop -> 179
	boolean -> 180
	number -> 181
	charac -> 182
	string -> 183
	Statement -> 204


S193{
	FunctionCall : Statement ( •Args ) «)»
	FunctionCall : Statement ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 205


S194{
	Lambda : ( # Params => Type ( Statement ) •) «$»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 206


S195{
	Lambda : ( # •Params => Type ( Statement ) ) «)»
	Lambda : ( # •Params => Type ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •BasicType «id»
	Type : •( FuncTypes => Type ) «id»
	Type : •[ Type ] «id»
	BasicType : •num «id»
	BasicType : •bool «id»
	BasicType : •char «id»
}
Transitions:
	Type -> 59
	( -> 60
	BasicType -> 61
	[ -> 62
	num -> 63
	bool -> 64
	char -> 65
	Params -> 207


S196{
	Constant : [ Type •] «)»
	Constant : [ Type •] «(»
}
Transitions:
	] -> 208


S197{
	Constant : [ ConstantArgs •] «)»
	Constant : [ ConstantArgs •] «(»
}
Transitions:
	] -> 209


S198{
	FunctionCall : operations ( •Args ) «)»
	FunctionCall : operations ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 210


S199{
	FunctionCall : relop ( •Args ) «)»
	FunctionCall : relop ( •Args ) «(»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •string «,»
	Constant : •[ ConstantArgs ] «,»
	Constant : •[ Type ] «,»
	Lambda : •( # Params => Type ( Statement ) ) «,»
	FunctionCall : •Statement ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	Statement -> 44
	id -> 45
	( -> 46
	[ -> 47
	Constant -> 48
	Lambda -> 49
	FunctionCall -> 50
	operations -> 52
	relop -> 53
	boolean -> 54
	number -> 55
	charac -> 56
	string -> 57
	Args -> 211


S200{
	Type : ( FuncTypes => Type •) «(»
}
Transitions:
	) -> 212


S201{
	Type : ( FuncTypes => Type •) «)»
}
Transitions:
	) -> 213


S202{
	Lambda : ( # Params => Type ( Statement •) ) «,»
	Lambda : ( # Params => Type ( Statement •) ) «]»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 193
	) -> 214


S203{
	Function : func id :: Params => Type ( Statement )• «(»
	Function : func id :: Params => Type ( Statement )• «func»
	Function : func id :: Params => Type ( Statement )• «[»
	Function : func id :: Params => Type ( Statement )• «boolean»
	Function : func id :: Params => Type ( Statement )• «charac»
	Function : func id :: Params => Type ( Statement )• «id»
	Function : func id :: Params => Type ( Statement )• «number»
	Function : func id :: Params => Type ( Statement )• «operations»
	Function : func id :: Params => Type ( Statement )• «relop»
	Function : func id :: Params => Type ( Statement )• «string»
}
Transitions:


S204{
	Lambda : ( # Params => Type ( Statement •) ) «,»
	Lambda : ( # Params => Type ( Statement •) ) «)»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 193
	) -> 215


S205{
	FunctionCall : Statement ( Args •) «)»
	FunctionCall : Statement ( Args •) «(»
}
Transitions:
	) -> 216


S206{
	Lambda : ( # Params => Type ( Statement ) )• «$»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


S207{
	Lambda : ( # Params •=> Type ( Statement ) ) «)»
	Lambda : ( # Params •=> Type ( Statement ) ) «(»
}
Transitions:
	=> -> 217


S208{
	Constant : [ Type ]• «)»
	Constant : [ Type ]• «(»
}
Transitions:


S209{
	Constant : [ ConstantArgs ]• «)»
	Constant : [ ConstantArgs ]• «(»
}
Transitions:


S210{
	FunctionCall : operations ( Args •) «)»
	FunctionCall : operations ( Args •) «(»
}
Transitions:
	) -> 218


S211{
	FunctionCall : relop ( Args •) «)»
	FunctionCall : relop ( Args •) «(»
}
Transitions:
	) -> 219


S212{
	Type : ( FuncTypes => Type )• «(»
}
Transitions:


S213{
	Type : ( FuncTypes => Type )• «)»
}
Transitions:


S214{
	Lambda : ( # Params => Type ( Statement ) •) «,»
	Lambda : ( # Params => Type ( Statement ) •) «]»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 220


S215{
	Lambda : ( # Params => Type ( Statement ) •) «,»
	Lambda : ( # Params => Type ( Statement ) •) «)»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 221


S216{
	FunctionCall : Statement ( Args )• «)»
	FunctionCall : Statement ( Args )• «(»
}
Transitions:


S217{
	Lambda : ( # Params => •Type ( Statement ) ) «)»
	Lambda : ( # Params => •Type ( Statement ) ) «(»
	Type : •BasicType «(»
	Type : •( FuncTypes => Type ) «(»
	Type : •[ Type ] «(»
	BasicType : •num «(»
	BasicType : •bool «(»
	BasicType : •char «(»
}
Transitions:
	( -> 125
	BasicType -> 126
	[ -> 127
	num -> 128
	bool -> 129
	char -> 130
	Type -> 222


S218{
	FunctionCall : operations ( Args )• «)»
	FunctionCall : operations ( Args )• «(»
}
Transitions:


S219{
	FunctionCall : relop ( Args )• «)»
	FunctionCall : relop ( Args )• «(»
}
Transitions:


S220{
	Lambda : ( # Params => Type ( Statement ) )• «,»
	Lambda : ( # Params => Type ( Statement ) )• «]»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


S221{
	Lambda : ( # Params => Type ( Statement ) )• «,»
	Lambda : ( # Params => Type ( Statement ) )• «)»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


S222{
	Lambda : ( # Params => Type •( Statement ) ) «)»
	Lambda : ( # Params => Type •( Statement ) ) «(»
}
Transitions:
	( -> 223


S223{
	Lambda : ( # Params => Type ( •Statement ) ) «)»
	Lambda : ( # Params => Type ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •string «)»
	Constant : •[ ConstantArgs ] «)»
	Constant : •[ Type ] «)»
	Lambda : •( # Params => Type ( Statement ) ) «)»
	FunctionCall : •Statement ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Statement : •id «(»
	Statement : •Constant «(»
	Statement : •Lambda «(»
	Statement : •FunctionCall «(»
	Constant : •boolean «(»
	Constant : •number «(»
	Constant : •charac «(»
	Constant : •string «(»
	Constant : •[ ConstantArgs ] «(»
	Constant : •[ Type ] «(»
	Lambda : •( # Params => Type ( Statement ) ) «(»
	FunctionCall : •Statement ( Args ) «(»
	FunctionCall : •operations ( Args ) «(»
	FunctionCall : •relop ( Args ) «(»
}
Transitions:
	id -> 172
	( -> 173
	[ -> 174
	Constant -> 175
	Lambda -> 176
	FunctionCall -> 177
	operations -> 178
	relop -> 179
	boolean -> 180
	number -> 181
	charac -> 182
	string -> 183
	Statement -> 224


S224{
	Lambda : ( # Params => Type ( Statement •) ) «)»
	Lambda : ( # Params => Type ( Statement •) ) «(»
	FunctionCall : Statement •( Args ) «)»
	FunctionCall : Statement •( Args ) «(»
}
Transitions:
	( -> 193
	) -> 225


S225{
	Lambda : ( # Params => Type ( Statement ) •) «)»
	Lambda : ( # Params => Type ( Statement ) •) «(»
}
Transitions:
	) -> 226


S226{
	Lambda : ( # Params => Type ( Statement ) )• «)»
	Lambda : ( # Params => Type ( Statement ) )• «(»
}
Transitions:


