S0{
	S' : •Program «$»
	Program : •Functions FunctionCall «$»
	Functions : •Function Functions «id»
	Functions : •Function Functions «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «id»
	Functions : •Function «operations»
	Functions : •Function «relop»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
}
Transitions:
	Program -> 1
	Functions -> 2
	Function -> 3
	func -> 4


S1{
	S' : Program• «$»
}
Transitions:


S2{
	Program : Functions •FunctionCall «$»
	FunctionCall : •id ( Args ) «$»
	FunctionCall : •operations ( Args ) «$»
	FunctionCall : •relop ( Args ) «$»
}
Transitions:
	FunctionCall -> 5
	id -> 6
	operations -> 7
	relop -> 8


S3{
	Functions : Function •Functions «id»
	Functions : Function •Functions «operations»
	Functions : Function •Functions «relop»
	Functions : Function• «id»
	Functions : Function• «operations»
	Functions : Function• «relop»
	Functions : •Function Functions «id»
	Functions : •Function «id»
	Functions : •Function Functions «operations»
	Functions : •Function «operations»
	Functions : •Function Functions «relop»
	Functions : •Function «relop»
	Function : •func id :: Params => Type ( Statement ) «func»
	Function : •func id :: Params => Type ( Statement ) «id»
	Function : •func id :: Params => Type ( Statement ) «operations»
	Function : •func id :: Params => Type ( Statement ) «relop»
}
Transitions:
	Function -> 3
	func -> 4
	Functions -> 9


S4{
	Function : func •id :: Params => Type ( Statement ) «func»
	Function : func •id :: Params => Type ( Statement ) «id»
	Function : func •id :: Params => Type ( Statement ) «operations»
	Function : func •id :: Params => Type ( Statement ) «relop»
}
Transitions:
	id -> 10


S5{
	Program : Functions FunctionCall• «$»
}
Transitions:


S6{
	FunctionCall : id •( Args ) «$»
}
Transitions:
	( -> 11


S7{
	FunctionCall : operations •( Args ) «$»
}
Transitions:
	( -> 12


S8{
	FunctionCall : relop •( Args ) «$»
}
Transitions:
	( -> 13


S9{
	Functions : Function Functions• «id»
	Functions : Function Functions• «operations»
	Functions : Function Functions• «relop»
}
Transitions:


S10{
	Function : func id •:: Params => Type ( Statement ) «func»
	Function : func id •:: Params => Type ( Statement ) «id»
	Function : func id •:: Params => Type ( Statement ) «operations»
	Function : func id •:: Params => Type ( Statement ) «relop»
}
Transitions:
	:: -> 14


S11{
	FunctionCall : id ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	Args -> 22
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28


S12{
	FunctionCall : operations ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 29


S13{
	FunctionCall : relop ( •Args ) «$»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 30


S14{
	Function : func id :: •Params => Type ( Statement ) «func»
	Function : func id :: •Params => Type ( Statement ) «id»
	Function : func id :: •Params => Type ( Statement ) «operations»
	Function : func id :: •Params => Type ( Statement ) «relop»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Params -> 31
	Type -> 32
	num -> 33
	bool -> 34
	char -> 35
	[ -> 36


S15{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «)»
}
Transitions:


S16{
	Statement : id• «,»
	Statement : id• «)»
	FunctionCall : id •( Args ) «,»
	FunctionCall : id •( Args ) «)»
}
Transitions:
	( -> 37


S17{
	Lambda : ( •# Params => ( Statement ) ) «,»
	Lambda : ( •# Params => ( Statement ) ) «(»
	Lambda : ( •# Params => ( Statement ) ) «)»
}
Transitions:
	# -> 38


S18{
	Args : Statement •, Args «)»
	Args : Statement• «)»
}
Transitions:
	, -> 39


S19{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «)»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •Lambda ( Args ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «]»
}
Transitions:
	FunctionCall -> 40
	id -> 41
	( -> 42
	Statement -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	Args -> 47
	operations -> 48
	relop -> 49
	Lambda -> 50
	boolean -> 51
	number -> 52
	charac -> 53


S20{
	Statement : Constant• «,»
	Statement : Constant• «)»
}
Transitions:


S21{
	Statement : LambdaExpr• «,»
	Statement : LambdaExpr• «)»
}
Transitions:


S22{
	FunctionCall : id ( Args •) «$»
}
Transitions:
	) -> 54


S23{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «)»
}
Transitions:
	( -> 55


S24{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «)»
}
Transitions:
	( -> 56


S25{
	LambdaExpr : Lambda• «,»
	LambdaExpr : Lambda •( Args ) «,»
	LambdaExpr : Lambda• «)»
	LambdaExpr : Lambda •( Args ) «)»
}
Transitions:
	( -> 57


S26{
	Constant : boolean• «,»
	Constant : boolean• «)»
}
Transitions:


S27{
	Constant : number• «,»
	Constant : number• «)»
}
Transitions:


S28{
	Constant : charac• «,»
	Constant : charac• «)»
}
Transitions:


S29{
	FunctionCall : operations ( Args •) «$»
}
Transitions:
	) -> 58


S30{
	FunctionCall : relop ( Args •) «$»
}
Transitions:
	) -> 59


S31{
	Function : func id :: Params •=> Type ( Statement ) «func»
	Function : func id :: Params •=> Type ( Statement ) «id»
	Function : func id :: Params •=> Type ( Statement ) «operations»
	Function : func id :: Params •=> Type ( Statement ) «relop»
}
Transitions:
	=> -> 60


S32{
	Params : Type •id , Params «=>»
	Params : Type •id «=>»
}
Transitions:
	id -> 61


S33{
	Type : num• «id»
}
Transitions:


S34{
	Type : bool• «id»
}
Transitions:


S35{
	Type : char• «id»
}
Transitions:


S36{
	Type : [ •Type ] «id»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	Type -> 62
	num -> 63
	bool -> 64
	char -> 65
	[ -> 66


S37{
	FunctionCall : id ( •Args ) «,»
	FunctionCall : id ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 67


S38{
	Lambda : ( # •Params => ( Statement ) ) «,»
	Lambda : ( # •Params => ( Statement ) ) «(»
	Lambda : ( # •Params => ( Statement ) ) «)»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 32
	num -> 33
	bool -> 34
	char -> 35
	[ -> 36
	Params -> 68


S39{
	Args : Statement , •Args «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 69


S40{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «]»
}
Transitions:


S41{
	Statement : id• «,»
	Statement : id• «]»
	FunctionCall : id •( Args ) «,»
	FunctionCall : id •( Args ) «]»
}
Transitions:
	( -> 70


S42{
	Lambda : ( •# Params => ( Statement ) ) «,»
	Lambda : ( •# Params => ( Statement ) ) «(»
	Lambda : ( •# Params => ( Statement ) ) «]»
}
Transitions:
	# -> 71


S43{
	Args : Statement •, Args «]»
	Args : Statement• «]»
}
Transitions:
	, -> 72


S44{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •Lambda ( Args ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «]»
}
Transitions:
	FunctionCall -> 40
	id -> 41
	( -> 42
	Statement -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	operations -> 48
	relop -> 49
	Lambda -> 50
	boolean -> 51
	number -> 52
	charac -> 53
	Args -> 73


S45{
	Statement : Constant• «,»
	Statement : Constant• «]»
}
Transitions:


S46{
	Statement : LambdaExpr• «,»
	Statement : LambdaExpr• «]»
}
Transitions:


S47{
	Constant : [ Args •] «,»
	Constant : [ Args •] «)»
}
Transitions:
	] -> 74


S48{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «]»
}
Transitions:
	( -> 75


S49{
	FunctionCall : relop •( Args ) «,»
	FunctionCall : relop •( Args ) «]»
}
Transitions:
	( -> 76


S50{
	LambdaExpr : Lambda• «,»
	LambdaExpr : Lambda •( Args ) «,»
	LambdaExpr : Lambda• «]»
	LambdaExpr : Lambda •( Args ) «]»
}
Transitions:
	( -> 77


S51{
	Constant : boolean• «,»
	Constant : boolean• «]»
}
Transitions:


S52{
	Constant : number• «,»
	Constant : number• «]»
}
Transitions:


S53{
	Constant : charac• «,»
	Constant : charac• «]»
}
Transitions:


S54{
	FunctionCall : id ( Args )• «$»
}
Transitions:


S55{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 78


S56{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 79


S57{
	LambdaExpr : Lambda ( •Args ) «,»
	LambdaExpr : Lambda ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 80


S58{
	FunctionCall : operations ( Args )• «$»
}
Transitions:


S59{
	FunctionCall : relop ( Args )• «$»
}
Transitions:


S60{
	Function : func id :: Params => •Type ( Statement ) «func»
	Function : func id :: Params => •Type ( Statement ) «id»
	Function : func id :: Params => •Type ( Statement ) «operations»
	Function : func id :: Params => •Type ( Statement ) «relop»
	Type : •num «(»
	Type : •bool «(»
	Type : •char «(»
	Type : •[ Type ] «(»
}
Transitions:
	Type -> 81
	num -> 82
	bool -> 83
	char -> 84
	[ -> 85


S61{
	Params : Type id •, Params «=>»
	Params : Type id• «=>»
}
Transitions:
	, -> 86


S62{
	Type : [ Type •] «id»
}
Transitions:
	] -> 87


S63{
	Type : num• «]»
}
Transitions:


S64{
	Type : bool• «]»
}
Transitions:


S65{
	Type : char• «]»
}
Transitions:


S66{
	Type : [ •Type ] «]»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	num -> 63
	bool -> 64
	char -> 65
	[ -> 66
	Type -> 88


S67{
	FunctionCall : id ( Args •) «,»
	FunctionCall : id ( Args •) «)»
}
Transitions:
	) -> 89


S68{
	Lambda : ( # Params •=> ( Statement ) ) «,»
	Lambda : ( # Params •=> ( Statement ) ) «(»
	Lambda : ( # Params •=> ( Statement ) ) «)»
}
Transitions:
	=> -> 90


S69{
	Args : Statement , Args• «)»
}
Transitions:


S70{
	FunctionCall : id ( •Args ) «,»
	FunctionCall : id ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 91


S71{
	Lambda : ( # •Params => ( Statement ) ) «,»
	Lambda : ( # •Params => ( Statement ) ) «(»
	Lambda : ( # •Params => ( Statement ) ) «]»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 32
	num -> 33
	bool -> 34
	char -> 35
	[ -> 36
	Params -> 92


S72{
	Args : Statement , •Args «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •Lambda ( Args ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «]»
}
Transitions:
	FunctionCall -> 40
	id -> 41
	( -> 42
	Statement -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	operations -> 48
	relop -> 49
	Lambda -> 50
	boolean -> 51
	number -> 52
	charac -> 53
	Args -> 93


S73{
	Constant : [ Args •] «,»
	Constant : [ Args •] «]»
}
Transitions:
	] -> 94


S74{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «)»
}
Transitions:


S75{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 95


S76{
	FunctionCall : relop ( •Args ) «,»
	FunctionCall : relop ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 96


S77{
	LambdaExpr : Lambda ( •Args ) «,»
	LambdaExpr : Lambda ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 97


S78{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «)»
}
Transitions:
	) -> 98


S79{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «)»
}
Transitions:
	) -> 99


S80{
	LambdaExpr : Lambda ( Args •) «,»
	LambdaExpr : Lambda ( Args •) «)»
}
Transitions:
	) -> 100


S81{
	Function : func id :: Params => Type •( Statement ) «func»
	Function : func id :: Params => Type •( Statement ) «id»
	Function : func id :: Params => Type •( Statement ) «operations»
	Function : func id :: Params => Type •( Statement ) «relop»
}
Transitions:
	( -> 101


S82{
	Type : num• «(»
}
Transitions:


S83{
	Type : bool• «(»
}
Transitions:


S84{
	Type : char• «(»
}
Transitions:


S85{
	Type : [ •Type ] «(»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	num -> 63
	bool -> 64
	char -> 65
	[ -> 66
	Type -> 102


S86{
	Params : Type id , •Params «=>»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 32
	num -> 33
	bool -> 34
	char -> 35
	[ -> 36
	Params -> 103


S87{
	Type : [ Type ]• «id»
}
Transitions:


S88{
	Type : [ Type •] «]»
}
Transitions:
	] -> 104


S89{
	FunctionCall : id ( Args )• «,»
	FunctionCall : id ( Args )• «)»
}
Transitions:


S90{
	Lambda : ( # Params => •( Statement ) ) «,»
	Lambda : ( # Params => •( Statement ) ) «(»
	Lambda : ( # Params => •( Statement ) ) «)»
}
Transitions:
	( -> 105


S91{
	FunctionCall : id ( Args •) «,»
	FunctionCall : id ( Args •) «]»
}
Transitions:
	) -> 106


S92{
	Lambda : ( # Params •=> ( Statement ) ) «,»
	Lambda : ( # Params •=> ( Statement ) ) «(»
	Lambda : ( # Params •=> ( Statement ) ) «]»
}
Transitions:
	=> -> 107


S93{
	Args : Statement , Args• «]»
}
Transitions:


S94{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «]»
}
Transitions:


S95{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «]»
}
Transitions:
	) -> 108


S96{
	FunctionCall : relop ( Args •) «,»
	FunctionCall : relop ( Args •) «]»
}
Transitions:
	) -> 109


S97{
	LambdaExpr : Lambda ( Args •) «,»
	LambdaExpr : Lambda ( Args •) «]»
}
Transitions:
	) -> 110


S98{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «)»
}
Transitions:


S99{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «)»
}
Transitions:


S100{
	LambdaExpr : Lambda ( Args )• «,»
	LambdaExpr : Lambda ( Args )• «)»
}
Transitions:


S101{
	Function : func id :: Params => Type ( •Statement ) «func»
	Function : func id :: Params => Type ( •Statement ) «id»
	Function : func id :: Params => Type ( •Statement ) «operations»
	Function : func id :: Params => Type ( •Statement ) «relop»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	Lambda : •( # Params => ( Statement ) ) «(»
}
Transitions:
	FunctionCall -> 111
	id -> 112
	( -> 113
	Statement -> 114
	[ -> 115
	Constant -> 116
	LambdaExpr -> 117
	operations -> 118
	relop -> 119
	Lambda -> 120
	boolean -> 121
	number -> 122
	charac -> 123


S102{
	Type : [ Type •] «(»
}
Transitions:
	] -> 124


S103{
	Params : Type id , Params• «=>»
}
Transitions:


S104{
	Type : [ Type ]• «]»
}
Transitions:


S105{
	Lambda : ( # Params => ( •Statement ) ) «,»
	Lambda : ( # Params => ( •Statement ) ) «(»
	Lambda : ( # Params => ( •Statement ) ) «)»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	Lambda : •( # Params => ( Statement ) ) «(»
}
Transitions:
	FunctionCall -> 111
	id -> 112
	( -> 113
	[ -> 115
	Constant -> 116
	LambdaExpr -> 117
	operations -> 118
	relop -> 119
	Lambda -> 120
	boolean -> 121
	number -> 122
	charac -> 123
	Statement -> 125


S106{
	FunctionCall : id ( Args )• «,»
	FunctionCall : id ( Args )• «]»
}
Transitions:


S107{
	Lambda : ( # Params => •( Statement ) ) «,»
	Lambda : ( # Params => •( Statement ) ) «(»
	Lambda : ( # Params => •( Statement ) ) «]»
}
Transitions:
	( -> 126


S108{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «]»
}
Transitions:


S109{
	FunctionCall : relop ( Args )• «,»
	FunctionCall : relop ( Args )• «]»
}
Transitions:


S110{
	LambdaExpr : Lambda ( Args )• «,»
	LambdaExpr : Lambda ( Args )• «]»
}
Transitions:


S111{
	Statement : FunctionCall• «)»
}
Transitions:


S112{
	Statement : id• «)»
	FunctionCall : id •( Args ) «)»
}
Transitions:
	( -> 127


S113{
	Lambda : ( •# Params => ( Statement ) ) «)»
	Lambda : ( •# Params => ( Statement ) ) «(»
}
Transitions:
	# -> 128


S114{
	Function : func id :: Params => Type ( Statement •) «func»
	Function : func id :: Params => Type ( Statement •) «id»
	Function : func id :: Params => Type ( Statement •) «operations»
	Function : func id :: Params => Type ( Statement •) «relop»
}
Transitions:
	) -> 129


S115{
	Constant : [ •Args ] «)»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •LambdaExpr «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	LambdaExpr : •Lambda «]»
	LambdaExpr : •Lambda ( Args ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
	FunctionCall : •relop ( Args ) «]»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «]»
}
Transitions:
	FunctionCall -> 40
	id -> 41
	( -> 42
	Statement -> 43
	[ -> 44
	Constant -> 45
	LambdaExpr -> 46
	operations -> 48
	relop -> 49
	Lambda -> 50
	boolean -> 51
	number -> 52
	charac -> 53
	Args -> 130


S116{
	Statement : Constant• «)»
}
Transitions:


S117{
	Statement : LambdaExpr• «)»
}
Transitions:


S118{
	FunctionCall : operations •( Args ) «)»
}
Transitions:
	( -> 131


S119{
	FunctionCall : relop •( Args ) «)»
}
Transitions:
	( -> 132


S120{
	LambdaExpr : Lambda• «)»
	LambdaExpr : Lambda •( Args ) «)»
}
Transitions:
	( -> 133


S121{
	Constant : boolean• «)»
}
Transitions:


S122{
	Constant : number• «)»
}
Transitions:


S123{
	Constant : charac• «)»
}
Transitions:


S124{
	Type : [ Type ]• «(»
}
Transitions:


S125{
	Lambda : ( # Params => ( Statement •) ) «,»
	Lambda : ( # Params => ( Statement •) ) «(»
	Lambda : ( # Params => ( Statement •) ) «)»
}
Transitions:
	) -> 134


S126{
	Lambda : ( # Params => ( •Statement ) ) «,»
	Lambda : ( # Params => ( •Statement ) ) «(»
	Lambda : ( # Params => ( •Statement ) ) «]»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	Lambda : •( # Params => ( Statement ) ) «(»
}
Transitions:
	FunctionCall -> 111
	id -> 112
	( -> 113
	[ -> 115
	Constant -> 116
	LambdaExpr -> 117
	operations -> 118
	relop -> 119
	Lambda -> 120
	boolean -> 121
	number -> 122
	charac -> 123
	Statement -> 135


S127{
	FunctionCall : id ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 136


S128{
	Lambda : ( # •Params => ( Statement ) ) «)»
	Lambda : ( # •Params => ( Statement ) ) «(»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 32
	num -> 33
	bool -> 34
	char -> 35
	[ -> 36
	Params -> 137


S129{
	Function : func id :: Params => Type ( Statement )• «func»
	Function : func id :: Params => Type ( Statement )• «id»
	Function : func id :: Params => Type ( Statement )• «operations»
	Function : func id :: Params => Type ( Statement )• «relop»
}
Transitions:


S130{
	Constant : [ Args •] «)»
}
Transitions:
	] -> 138


S131{
	FunctionCall : operations ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 139


S132{
	FunctionCall : relop ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 140


S133{
	LambdaExpr : Lambda ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •LambdaExpr «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	LambdaExpr : •Lambda «,»
	LambdaExpr : •Lambda ( Args ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	FunctionCall : •relop ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «,»
	Lambda : •( # Params => ( Statement ) ) «(»
	Lambda : •( # Params => ( Statement ) ) «)»
}
Transitions:
	FunctionCall -> 15
	id -> 16
	( -> 17
	Statement -> 18
	[ -> 19
	Constant -> 20
	LambdaExpr -> 21
	operations -> 23
	relop -> 24
	Lambda -> 25
	boolean -> 26
	number -> 27
	charac -> 28
	Args -> 141


S134{
	Lambda : ( # Params => ( Statement ) •) «,»
	Lambda : ( # Params => ( Statement ) •) «(»
	Lambda : ( # Params => ( Statement ) •) «)»
}
Transitions:
	) -> 142


S135{
	Lambda : ( # Params => ( Statement •) ) «,»
	Lambda : ( # Params => ( Statement •) ) «(»
	Lambda : ( # Params => ( Statement •) ) «]»
}
Transitions:
	) -> 143


S136{
	FunctionCall : id ( Args •) «)»
}
Transitions:
	) -> 144


S137{
	Lambda : ( # Params •=> ( Statement ) ) «)»
	Lambda : ( # Params •=> ( Statement ) ) «(»
}
Transitions:
	=> -> 145


S138{
	Constant : [ Args ]• «)»
}
Transitions:


S139{
	FunctionCall : operations ( Args •) «)»
}
Transitions:
	) -> 146


S140{
	FunctionCall : relop ( Args •) «)»
}
Transitions:
	) -> 147


S141{
	LambdaExpr : Lambda ( Args •) «)»
}
Transitions:
	) -> 148


S142{
	Lambda : ( # Params => ( Statement ) )• «,»
	Lambda : ( # Params => ( Statement ) )• «(»
	Lambda : ( # Params => ( Statement ) )• «)»
}
Transitions:


S143{
	Lambda : ( # Params => ( Statement ) •) «,»
	Lambda : ( # Params => ( Statement ) •) «(»
	Lambda : ( # Params => ( Statement ) •) «]»
}
Transitions:
	) -> 149


S144{
	FunctionCall : id ( Args )• «)»
}
Transitions:


S145{
	Lambda : ( # Params => •( Statement ) ) «)»
	Lambda : ( # Params => •( Statement ) ) «(»
}
Transitions:
	( -> 150


S146{
	FunctionCall : operations ( Args )• «)»
}
Transitions:


S147{
	FunctionCall : relop ( Args )• «)»
}
Transitions:


S148{
	LambdaExpr : Lambda ( Args )• «)»
}
Transitions:


S149{
	Lambda : ( # Params => ( Statement ) )• «,»
	Lambda : ( # Params => ( Statement ) )• «(»
	Lambda : ( # Params => ( Statement ) )• «]»
}
Transitions:


S150{
	Lambda : ( # Params => ( •Statement ) ) «)»
	Lambda : ( # Params => ( •Statement ) ) «(»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •LambdaExpr «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	LambdaExpr : •Lambda «)»
	LambdaExpr : •Lambda ( Args ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
	FunctionCall : •relop ( Args ) «)»
	Lambda : •( # Params => ( Statement ) ) «)»
	Lambda : •( # Params => ( Statement ) ) «(»
}
Transitions:
	FunctionCall -> 111
	id -> 112
	( -> 113
	[ -> 115
	Constant -> 116
	LambdaExpr -> 117
	operations -> 118
	relop -> 119
	Lambda -> 120
	boolean -> 121
	number -> 122
	charac -> 123
	Statement -> 151


S151{
	Lambda : ( # Params => ( Statement •) ) «)»
	Lambda : ( # Params => ( Statement •) ) «(»
}
Transitions:
	) -> 152


S152{
	Lambda : ( # Params => ( Statement ) •) «)»
	Lambda : ( # Params => ( Statement ) •) «(»
}
Transitions:
	) -> 153


S153{
	Lambda : ( # Params => ( Statement ) )• «)»
	Lambda : ( # Params => ( Statement ) )• «(»
}
Transitions:


