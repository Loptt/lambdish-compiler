
_digit : '0'-'9' ;
_alpha : 'a'-'z' | 'A'-'Z';
_id : _alpha {(_digit | _alpha)};
_integer : _digit {_digit};
_float : _digit {_digit} '.' _digit {_digit};
_string : '"' {(_digit | _alpha | ' ')} '"';
_true : 't' 'r' 'u' 'e';
_false : 'f' 'a' 'l' 's' 'e';

!ws : ' ' | '\t' | '\n' | '\r';

operations : '+' | '-' | '*' | '/' | '%';

relop : '<' | '>' | '=' '=' | '<' '=' | '>' '=' | '!' '='; 

number : _integer | _float;
charac : '\'' (_alpha | _digit) '\'';
id : _id;
boolean : _true | _false;

<< import "github.com/Loptt/lambdish-compiler/ast" >>

Program 
    : Functions FunctionCall        <<ast.NewProgram($0, $1)>>
    ;   

Functions 
    : Function Functions            << ast.AppendFunctionList($0, $1) >>  
    | Function                      << ast.NewFunctionList($0) >>  
    ;
    
Function 
    : "func" id "::" Params "=>" Type "(" Statement ")"  << ast.NewFunctionEntry($0, $2, $4) >>
    ;

Params : 
    Type id "," Params              << ast.AppendParams($0, $1, $3) >>
    | Type id                       << ast.NewParams($0, $1) >>
    | empty                         << ast.NewEmptyParams() >>
    ;

Type : 
    "num"                            << ast.NewLambdishType($0) >>
    | "bool"                         << ast.NewLambdishType($0) >>  
    | "char"                         << ast.NewLambdishType($0) >>   
    | "[" Type "]"                   << ast.AppendLambdishType($1) >>
    ; 

Statement : 
    id                              << ast.NewStatement($0) >>
    | Constant                      << ast.NewStatement($0) >>
    | LambdaExpr                    << ast.NewStatement($0) >>
    | FunctionCall                  << ast.NewStatement($0) >>
    ;

FunctionCall : 
    id "(" Args ")"                << ast.NewFunctionCall($0, $1) >>
    | operations "(" Args ")"      << ast.NewFunctionCall($0, $1) >>
    | relop "(" Args ")"           << ast.NewFunctionCall($0, $1) >>
    ;

LambdaExpr :
    Lambda                          << ast.NewLambdaExpre,nil >>
    | Lambda "(" Args ")"           << nil,nil >>
    ;

Lambda :
    "(" "#" Params "=>" "(" Statement ")" ")" << ast.NewLambda($2,$5) >>
    ;

Args :
    Statement "," Args              << ast.AppendArgs($0,$2) >>
    | Statement                     << ast.NewArgs($0) >>)
    | empty                         << ast.NewArgs($0)  >>
    ;

Constant : 
    boolean                         << ast.NewConstant($0) >>
    | number                        << ast.NewConstant($0) >>
    | charac                        << ast.NewConstant($0) >>
    | "[" Args "]"                  << ast.AppendConstant($1) >>
    ;
