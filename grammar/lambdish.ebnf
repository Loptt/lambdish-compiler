
_digit : '0'-'9' ;
_alpha : 'a'-'z' | 'A'-'Z';
_id : _alpha {(_digit | _alpha)};
_integer : _digit {_digit};
_float : _digit {_digit} '.' _digit {_digit};
_string : '"' {(_digit | _alpha | ' ')} '"';
_true : 't' 'r' 'u' 'e';
_false : 'f' 'a' 'l' 's' 'e';

!ws : ' ' | '\t' | '\n' | '\r';

operations : '+' | '-' | '*' | '/' | '%';

relop : '<' | '>' | '=' '=' | '<' '=' | '>' '=' | '!' '='; 

number : _integer | _float;
charac : '\'' (_alpha | _digit) '\'';
id : _id;
boolean : _true | _false;

<< import (
    "github.com/Loptt/lambdish-compiler/ast" 
    "github.com/Loptt/lambdish-compiler/dir"
    "github.com/Loptt/lambdish-compiler/types") >>

Program 
    : Functions Statement           << ast.NewProgram($0, $1) >>
    ;   

Functions 
    : Function Functions            << ast.AppendFunctionList($0, $1) >>  
    | Function                      << ast.NewFunctionList($0) >>  
    ;
    
Function 
    : "func" id "::" Params "=>" Type "(" Statement ")"  << ast.NewFunction($1, $3, $5, $7) >>
    ;

Params : 
    Type id "," Params              << ast.AppendParamsList($0, $1, $3) >>
    | Type id                       << ast.NewParamsList($0, $1) >>
    | empty                         << make([]*dir.VarEntry, 0), nil >>
    ;

Type 
    : "num"                          << ast.NewType($0) >>
    | "bool"                         << ast.NewType($0) >>  
    | "char"                         << ast.NewType($0) >>
    | "(" FuncTypes "=>" Type ")"    << ast.NewFunctionType($1, $3)>>
    | "[" Type "]"                   << ast.AppendType($1) >>
    ; 

FuncTypes
    : Type "," FuncTypes             << ast.AppendFuncTypeList($0, $2) >>
    | Type                           << ast.NewFuncTypeList($0) >>
    | empty                          << make([]*types.LambdishType, 0 ), nil >>
    ;

Statement 
    : id                            << ast.NewStatement($0) >>
    | Constant                      << ast.NewStatement($0) >>
    | LambdaExpr                    << ast.NewStatement($0) >>
    | FunctionCall                  << ast.NewStatement($0) >>
    ;

FunctionCall 
    : id "(" Args ")"              << ast.NewFunctionCall($0, $2) >>
    | operations "(" Args ")"      << ast.NewFunctionCall($0, $2) >>
    | relop "(" Args ")"           << ast.NewFunctionCall($0, $2) >>
    ;

LambdaExpr 
    : Lambda                        << $0, nil>>
    | LambdaCall                    << $0, nil >>
    ;

Lambda 
    : "(" "#" Params "=>" "(" Statement ")" ")" << ast.NewLambda($2,$5) >>
    ;

LambdaCall 
    : "(" "#" Params "=>" "(" Statement ")" ")" "(" Args ")" << ast.NewLambdaCall($2,$5,$9) >>
    ;

Args 
    : Statement "," Args            << ast.AppendStatementList($0,$2) >>
    | Statement                     << ast.NewStatementList($0) >>
    | empty                         << make([]ast.Statement, 0), nil >>
    ;

Constant 
    : boolean                       << ast.NewConstantBool($0) >>
    | number                        << ast.NewConstantNum($0) >>
    | charac                        << ast.NewConstantChar($0) >>
    | "[" Args "]"                  << ast.AppendConstant($1) >>
    ;
