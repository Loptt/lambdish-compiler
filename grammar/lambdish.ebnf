
_digit : '0'-'9' ;
_alpha : 'a'-'z' | 'A'-'Z';
_id : _alpha {(_digit | _alpha)};
_integer : _digit {_digit};
_float : _digit {_digit} '.' _digit {_digit};
_string : '"' {(_digit | _alpha | ' ')} '"';
_true : 't' 'r' 'u' 'e';
_false : 'f' 'a' 'l' 's' 'e';

!ws : ' ' | '\t' | '\n' | '\r';

operations : '+' | '-' | '*' | '/' | '%';

relop : '<' | '>' | '=' '=' | '<' '=' | '>' '=' | '!' '='; 

number : _integer | _float;
charac : '\'' (_alpha | _digit) '\'';
id : _id;
boolean : _true | _false;

<< import "github.com/Loptt/lambdish-compiler/ast" >>

Program : 
    List                            << ast.NewList($0) >>
;

List 
    : FunctionOrCall List           << ast.AppendList($0,$1) >>
    | empty                         << nil, nil >>
    ;

FunctionOrCall 
    : Function                      << ast.NewFunctionOrCall($0) >>
    | FunctionCall                  << ast.NewFunctionOrCall($0)>>
    ;

Function : 
    id "::" Params "=>" Type "(" Statement ")" <<ast.newFunction($0,$1,$2,$3)>>
    ;

Params : 
    Type id "," Params              << ast.AppendParams($0,$1,$2)>>
    | Type id                       << ast.NewParams($0,$1) >>
    | empty                         << nil, nil >>
    ;

Type : 
    "num"                           << ast.NewType($0) >>
    | "bool"                        << ast.NewType($0) >>
    | "char"                        << ast.NewType($0) >>
    | "[" Type "]"                  << ast.AppendType($0) >>
    ; 

Statement : 
    id                              <<ast.NewStatement($0)>>
    | Constant                      <<ast.NewStatement($0)>>
    | LambdaExpr                    <<ast.NewStatement($0)>>
    | FunctionCall                  <<ast.NewStatement($0)>>
    ;

FunctionCall : 
    id "(" Args ")"                 <<ast.AppendArgsId($0,$1)>>
    | operations "(" Args ")"       <<ast.AppendArgsOperations($0,$1)>>
    | relop "(" Args ")"            <<ast.AppendArgsRelop($0,$1)>>
    ;
LambdaExpr :
    Lambda                          <<ast.NewLambdaExpr($0)>>
    | Lambda "(" Args ")"           <<ast.AppendArgsLambda($0,$1)>>
    ;
Lambda :
    "(" "#" Params "=>" "(" Statement ")" ")" <<ast.NewLambda($0,$1)>>
    ;

Args :
    Statement "," Args              <<ast.AppendArgsStatement($0,$1)>>
    | Statement                     <<ast.NewArgs($0)>>
    | empty                         << nil, nil >>
    ;

Constant : 
    boolean                         <<ast.NewConstant($0)>>
    | number                        <<ast.NewConstant($0)>>
    | charac                        <<ast.NewConstant($0)>>
    | "[" Args "]"                  <<ast.AppendConstant($1)>>
    ;
