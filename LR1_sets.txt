S0{
	S' : •Program «$»
	Program : •List «$»
	List : •FunctionOrCall List «$»
	List : empty• «$»
	FunctionOrCall : •Function «$»
	FunctionOrCall : •Function «id»
	FunctionOrCall : •Function «operations»
	FunctionOrCall : •FunctionCall «$»
	FunctionOrCall : •FunctionCall «id»
	FunctionOrCall : •FunctionCall «operations»
	Function : •id :: Params => Type ( Statement ) «$»
	Function : •id :: Params => Type ( Statement ) «id»
	Function : •id :: Params => Type ( Statement ) «operations»
	FunctionCall : •id ( Args ) «$»
	FunctionCall : •operations ( Args ) «$»
	FunctionCall : •id ( Args ) «id»
	FunctionCall : •operations ( Args ) «id»
	FunctionCall : •id ( Args ) «operations»
	FunctionCall : •operations ( Args ) «operations»
}
Transitions:
	Program -> 1
	List -> 2
	FunctionOrCall -> 3
	Function -> 4
	FunctionCall -> 5
	id -> 6
	operations -> 7


S1{
	S' : Program• «$»
}
Transitions:


S2{
	Program : List• «$»
}
Transitions:


S3{
	List : FunctionOrCall •List «$»
	List : •FunctionOrCall List «$»
	List : empty• «$»
	FunctionOrCall : •Function «$»
	FunctionOrCall : •Function «id»
	FunctionOrCall : •Function «operations»
	FunctionOrCall : •FunctionCall «$»
	FunctionOrCall : •FunctionCall «id»
	FunctionOrCall : •FunctionCall «operations»
	Function : •id :: Params => Type ( Statement ) «$»
	Function : •id :: Params => Type ( Statement ) «id»
	Function : •id :: Params => Type ( Statement ) «operations»
	FunctionCall : •id ( Args ) «$»
	FunctionCall : •operations ( Args ) «$»
	FunctionCall : •id ( Args ) «id»
	FunctionCall : •operations ( Args ) «id»
	FunctionCall : •id ( Args ) «operations»
	FunctionCall : •operations ( Args ) «operations»
}
Transitions:
	FunctionOrCall -> 3
	Function -> 4
	FunctionCall -> 5
	id -> 6
	operations -> 7
	List -> 8


S4{
	FunctionOrCall : Function• «$»
	FunctionOrCall : Function• «id»
	FunctionOrCall : Function• «operations»
}
Transitions:


S5{
	FunctionOrCall : FunctionCall• «$»
	FunctionOrCall : FunctionCall• «id»
	FunctionOrCall : FunctionCall• «operations»
}
Transitions:


S6{
	Function : id •:: Params => Type ( Statement ) «$»
	Function : id •:: Params => Type ( Statement ) «id»
	Function : id •:: Params => Type ( Statement ) «operations»
	FunctionCall : id •( Args ) «$»
	FunctionCall : id •( Args ) «id»
	FunctionCall : id •( Args ) «operations»
}
Transitions:
	:: -> 9
	( -> 10


S7{
	FunctionCall : operations •( Args ) «$»
	FunctionCall : operations •( Args ) «id»
	FunctionCall : operations •( Args ) «operations»
}
Transitions:
	( -> 11


S8{
	List : FunctionOrCall List• «$»
}
Transitions:


S9{
	Function : id :: •Params => Type ( Statement ) «$»
	Function : id :: •Params => Type ( Statement ) «id»
	Function : id :: •Params => Type ( Statement ) «operations»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Params -> 12
	Type -> 13
	num -> 14
	bool -> 15
	char -> 16
	[ -> 17


S10{
	FunctionCall : id ( •Args ) «$»
	FunctionCall : id ( •Args ) «id»
	FunctionCall : id ( •Args ) «operations»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	Args -> 25
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29


S11{
	FunctionCall : operations ( •Args ) «$»
	FunctionCall : operations ( •Args ) «id»
	FunctionCall : operations ( •Args ) «operations»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 30


S12{
	Function : id :: Params •=> Type ( Statement ) «$»
	Function : id :: Params •=> Type ( Statement ) «id»
	Function : id :: Params •=> Type ( Statement ) «operations»
}
Transitions:
	=> -> 31


S13{
	Params : Type •id , Params «=>»
	Params : Type •id «=>»
}
Transitions:
	id -> 32


S14{
	Type : num• «id»
}
Transitions:


S15{
	Type : bool• «id»
}
Transitions:


S16{
	Type : char• «id»
}
Transitions:


S17{
	Type : [ •Type ] «id»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	Type -> 33
	num -> 34
	bool -> 35
	char -> 36
	[ -> 37


S18{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «)»
}
Transitions:


S19{
	Statement : id• «,»
	Statement : id• «)»
	FunctionCall : id •( Args ) «,»
	FunctionCall : id •( Args ) «)»
}
Transitions:
	( -> 38


S20{
	Lambda : ( •# Params => Statement ) «,»
	Lambda : ( •# Params => Statement ) «)»
}
Transitions:
	# -> 39


S21{
	Args : Statement •, Args «)»
	Args : Statement• «)»
}
Transitions:
	, -> 40


S22{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «)»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Statement ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
}
Transitions:
	FunctionCall -> 41
	id -> 42
	( -> 43
	Statement -> 44
	[ -> 45
	Constant -> 46
	Lambda -> 47
	Args -> 48
	operations -> 49
	boolean -> 50
	number -> 51
	charac -> 52


S23{
	Statement : Constant• «,»
	Statement : Constant• «)»
}
Transitions:


S24{
	Statement : Lambda• «,»
	Statement : Lambda• «)»
}
Transitions:


S25{
	FunctionCall : id ( Args •) «$»
	FunctionCall : id ( Args •) «id»
	FunctionCall : id ( Args •) «operations»
}
Transitions:
	) -> 53


S26{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «)»
}
Transitions:
	( -> 54


S27{
	Constant : boolean• «,»
	Constant : boolean• «)»
}
Transitions:


S28{
	Constant : number• «,»
	Constant : number• «)»
}
Transitions:


S29{
	Constant : charac• «,»
	Constant : charac• «)»
}
Transitions:


S30{
	FunctionCall : operations ( Args •) «$»
	FunctionCall : operations ( Args •) «id»
	FunctionCall : operations ( Args •) «operations»
}
Transitions:
	) -> 55


S31{
	Function : id :: Params => •Type ( Statement ) «$»
	Function : id :: Params => •Type ( Statement ) «id»
	Function : id :: Params => •Type ( Statement ) «operations»
	Type : •num «(»
	Type : •bool «(»
	Type : •char «(»
	Type : •[ Type ] «(»
}
Transitions:
	Type -> 56
	num -> 57
	bool -> 58
	char -> 59
	[ -> 60


S32{
	Params : Type id •, Params «=>»
	Params : Type id• «=>»
}
Transitions:
	, -> 61


S33{
	Type : [ Type •] «id»
}
Transitions:
	] -> 62


S34{
	Type : num• «]»
}
Transitions:


S35{
	Type : bool• «]»
}
Transitions:


S36{
	Type : char• «]»
}
Transitions:


S37{
	Type : [ •Type ] «]»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	num -> 34
	bool -> 35
	char -> 36
	[ -> 37
	Type -> 63


S38{
	FunctionCall : id ( •Args ) «,»
	FunctionCall : id ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 64


S39{
	Lambda : ( # •Params => Statement ) «,»
	Lambda : ( # •Params => Statement ) «)»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 13
	num -> 14
	bool -> 15
	char -> 16
	[ -> 17
	Params -> 65


S40{
	Args : Statement , •Args «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 66


S41{
	Statement : FunctionCall• «,»
	Statement : FunctionCall• «]»
}
Transitions:


S42{
	Statement : id• «,»
	Statement : id• «]»
	FunctionCall : id •( Args ) «,»
	FunctionCall : id •( Args ) «]»
}
Transitions:
	( -> 67


S43{
	Lambda : ( •# Params => Statement ) «,»
	Lambda : ( •# Params => Statement ) «]»
}
Transitions:
	# -> 68


S44{
	Args : Statement •, Args «]»
	Args : Statement• «]»
}
Transitions:
	, -> 69


S45{
	Constant : [ •Args ] «,»
	Constant : [ •Args ] «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Statement ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
}
Transitions:
	FunctionCall -> 41
	id -> 42
	( -> 43
	Statement -> 44
	[ -> 45
	Constant -> 46
	Lambda -> 47
	operations -> 49
	boolean -> 50
	number -> 51
	charac -> 52
	Args -> 70


S46{
	Statement : Constant• «,»
	Statement : Constant• «]»
}
Transitions:


S47{
	Statement : Lambda• «,»
	Statement : Lambda• «]»
}
Transitions:


S48{
	Constant : [ Args •] «,»
	Constant : [ Args •] «)»
}
Transitions:
	] -> 71


S49{
	FunctionCall : operations •( Args ) «,»
	FunctionCall : operations •( Args ) «]»
}
Transitions:
	( -> 72


S50{
	Constant : boolean• «,»
	Constant : boolean• «]»
}
Transitions:


S51{
	Constant : number• «,»
	Constant : number• «]»
}
Transitions:


S52{
	Constant : charac• «,»
	Constant : charac• «]»
}
Transitions:


S53{
	FunctionCall : id ( Args )• «$»
	FunctionCall : id ( Args )• «id»
	FunctionCall : id ( Args )• «operations»
}
Transitions:


S54{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 73


S55{
	FunctionCall : operations ( Args )• «$»
	FunctionCall : operations ( Args )• «id»
	FunctionCall : operations ( Args )• «operations»
}
Transitions:


S56{
	Function : id :: Params => Type •( Statement ) «$»
	Function : id :: Params => Type •( Statement ) «id»
	Function : id :: Params => Type •( Statement ) «operations»
}
Transitions:
	( -> 74


S57{
	Type : num• «(»
}
Transitions:


S58{
	Type : bool• «(»
}
Transitions:


S59{
	Type : char• «(»
}
Transitions:


S60{
	Type : [ •Type ] «(»
	Type : •num «]»
	Type : •bool «]»
	Type : •char «]»
	Type : •[ Type ] «]»
}
Transitions:
	num -> 34
	bool -> 35
	char -> 36
	[ -> 37
	Type -> 75


S61{
	Params : Type id , •Params «=>»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 13
	num -> 14
	bool -> 15
	char -> 16
	[ -> 17
	Params -> 76


S62{
	Type : [ Type ]• «id»
}
Transitions:


S63{
	Type : [ Type •] «]»
}
Transitions:
	] -> 77


S64{
	FunctionCall : id ( Args •) «,»
	FunctionCall : id ( Args •) «)»
}
Transitions:
	) -> 78


S65{
	Lambda : ( # Params •=> Statement ) «,»
	Lambda : ( # Params •=> Statement ) «)»
}
Transitions:
	=> -> 79


S66{
	Args : Statement , Args• «)»
}
Transitions:


S67{
	FunctionCall : id ( •Args ) «,»
	FunctionCall : id ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 80


S68{
	Lambda : ( # •Params => Statement ) «,»
	Lambda : ( # •Params => Statement ) «]»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 13
	num -> 14
	bool -> 15
	char -> 16
	[ -> 17
	Params -> 81


S69{
	Args : Statement , •Args «]»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Statement ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
}
Transitions:
	FunctionCall -> 41
	id -> 42
	( -> 43
	Statement -> 44
	[ -> 45
	Constant -> 46
	Lambda -> 47
	operations -> 49
	boolean -> 50
	number -> 51
	charac -> 52
	Args -> 82


S70{
	Constant : [ Args •] «,»
	Constant : [ Args •] «]»
}
Transitions:
	] -> 83


S71{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «)»
}
Transitions:


S72{
	FunctionCall : operations ( •Args ) «,»
	FunctionCall : operations ( •Args ) «]»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 84


S73{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «)»
}
Transitions:
	) -> 85


S74{
	Function : id :: Params => Type ( •Statement ) «$»
	Function : id :: Params => Type ( •Statement ) «id»
	Function : id :: Params => Type ( •Statement ) «operations»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 86
	id -> 87
	( -> 88
	Statement -> 89
	[ -> 90
	Constant -> 91
	Lambda -> 92
	operations -> 93
	boolean -> 94
	number -> 95
	charac -> 96


S75{
	Type : [ Type •] «(»
}
Transitions:
	] -> 97


S76{
	Params : Type id , Params• «=>»
}
Transitions:


S77{
	Type : [ Type ]• «]»
}
Transitions:


S78{
	FunctionCall : id ( Args )• «,»
	FunctionCall : id ( Args )• «)»
}
Transitions:


S79{
	Lambda : ( # Params => •Statement ) «,»
	Lambda : ( # Params => •Statement ) «)»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 86
	id -> 87
	( -> 88
	[ -> 90
	Constant -> 91
	Lambda -> 92
	operations -> 93
	boolean -> 94
	number -> 95
	charac -> 96
	Statement -> 98


S80{
	FunctionCall : id ( Args •) «,»
	FunctionCall : id ( Args •) «]»
}
Transitions:
	) -> 99


S81{
	Lambda : ( # Params •=> Statement ) «,»
	Lambda : ( # Params •=> Statement ) «]»
}
Transitions:
	=> -> 100


S82{
	Args : Statement , Args• «]»
}
Transitions:


S83{
	Constant : [ Args ]• «,»
	Constant : [ Args ]• «]»
}
Transitions:


S84{
	FunctionCall : operations ( Args •) «,»
	FunctionCall : operations ( Args •) «]»
}
Transitions:
	) -> 101


S85{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «)»
}
Transitions:


S86{
	Statement : FunctionCall• «)»
}
Transitions:


S87{
	Statement : id• «)»
	FunctionCall : id •( Args ) «)»
}
Transitions:
	( -> 102


S88{
	Lambda : ( •# Params => Statement ) «)»
}
Transitions:
	# -> 103


S89{
	Function : id :: Params => Type ( Statement •) «$»
	Function : id :: Params => Type ( Statement •) «id»
	Function : id :: Params => Type ( Statement •) «operations»
}
Transitions:
	) -> 104


S90{
	Constant : [ •Args ] «)»
	Args : •Statement , Args «]»
	Args : •Statement «]»
	Args : empty• «]»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «]»
	Statement : •Constant «]»
	Statement : •Lambda «]»
	Statement : •FunctionCall «]»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «]»
	Constant : •number «]»
	Constant : •charac «]»
	Constant : •[ Args ] «]»
	Lambda : •( # Params => Statement ) «]»
	FunctionCall : •id ( Args ) «]»
	FunctionCall : •operations ( Args ) «]»
}
Transitions:
	FunctionCall -> 41
	id -> 42
	( -> 43
	Statement -> 44
	[ -> 45
	Constant -> 46
	Lambda -> 47
	operations -> 49
	boolean -> 50
	number -> 51
	charac -> 52
	Args -> 105


S91{
	Statement : Constant• «)»
}
Transitions:


S92{
	Statement : Lambda• «)»
}
Transitions:


S93{
	FunctionCall : operations •( Args ) «)»
}
Transitions:
	( -> 106


S94{
	Constant : boolean• «)»
}
Transitions:


S95{
	Constant : number• «)»
}
Transitions:


S96{
	Constant : charac• «)»
}
Transitions:


S97{
	Type : [ Type ]• «(»
}
Transitions:


S98{
	Lambda : ( # Params => Statement •) «,»
	Lambda : ( # Params => Statement •) «)»
}
Transitions:
	) -> 107


S99{
	FunctionCall : id ( Args )• «,»
	FunctionCall : id ( Args )• «]»
}
Transitions:


S100{
	Lambda : ( # Params => •Statement ) «,»
	Lambda : ( # Params => •Statement ) «]»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 86
	id -> 87
	( -> 88
	[ -> 90
	Constant -> 91
	Lambda -> 92
	operations -> 93
	boolean -> 94
	number -> 95
	charac -> 96
	Statement -> 108


S101{
	FunctionCall : operations ( Args )• «,»
	FunctionCall : operations ( Args )• «]»
}
Transitions:


S102{
	FunctionCall : id ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 109


S103{
	Lambda : ( # •Params => Statement ) «)»
	Params : •Type id , Params «=>»
	Params : •Type id «=>»
	Params : empty• «=>»
	Type : •num «id»
	Type : •bool «id»
	Type : •char «id»
	Type : •[ Type ] «id»
}
Transitions:
	Type -> 13
	num -> 14
	bool -> 15
	char -> 16
	[ -> 17
	Params -> 110


S104{
	Function : id :: Params => Type ( Statement )• «$»
	Function : id :: Params => Type ( Statement )• «id»
	Function : id :: Params => Type ( Statement )• «operations»
}
Transitions:


S105{
	Constant : [ Args •] «)»
}
Transitions:
	] -> 111


S106{
	FunctionCall : operations ( •Args ) «)»
	Args : •Statement , Args «)»
	Args : •Statement «)»
	Args : empty• «)»
	Statement : •id «,»
	Statement : •Constant «,»
	Statement : •Lambda «,»
	Statement : •FunctionCall «,»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «,»
	Constant : •number «,»
	Constant : •charac «,»
	Constant : •[ Args ] «,»
	Lambda : •( # Params => Statement ) «,»
	FunctionCall : •id ( Args ) «,»
	FunctionCall : •operations ( Args ) «,»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 18
	id -> 19
	( -> 20
	Statement -> 21
	[ -> 22
	Constant -> 23
	Lambda -> 24
	operations -> 26
	boolean -> 27
	number -> 28
	charac -> 29
	Args -> 112


S107{
	Lambda : ( # Params => Statement )• «,»
	Lambda : ( # Params => Statement )• «)»
}
Transitions:


S108{
	Lambda : ( # Params => Statement •) «,»
	Lambda : ( # Params => Statement •) «]»
}
Transitions:
	) -> 113


S109{
	FunctionCall : id ( Args •) «)»
}
Transitions:
	) -> 114


S110{
	Lambda : ( # Params •=> Statement ) «)»
}
Transitions:
	=> -> 115


S111{
	Constant : [ Args ]• «)»
}
Transitions:


S112{
	FunctionCall : operations ( Args •) «)»
}
Transitions:
	) -> 116


S113{
	Lambda : ( # Params => Statement )• «,»
	Lambda : ( # Params => Statement )• «]»
}
Transitions:


S114{
	FunctionCall : id ( Args )• «)»
}
Transitions:


S115{
	Lambda : ( # Params => •Statement ) «)»
	Statement : •id «)»
	Statement : •Constant «)»
	Statement : •Lambda «)»
	Statement : •FunctionCall «)»
	Constant : •boolean «)»
	Constant : •number «)»
	Constant : •charac «)»
	Constant : •[ Args ] «)»
	Lambda : •( # Params => Statement ) «)»
	FunctionCall : •id ( Args ) «)»
	FunctionCall : •operations ( Args ) «)»
}
Transitions:
	FunctionCall -> 86
	id -> 87
	( -> 88
	[ -> 90
	Constant -> 91
	Lambda -> 92
	operations -> 93
	boolean -> 94
	number -> 95
	charac -> 96
	Statement -> 117


S116{
	FunctionCall : operations ( Args )• «)»
}
Transitions:


S117{
	Lambda : ( # Params => Statement •) «)»
}
Transitions:
	) -> 118


S118{
	Lambda : ( # Params => Statement )• «)»
}
Transitions:


