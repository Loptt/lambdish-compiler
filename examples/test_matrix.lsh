func flatten:: [[num]] x => [num] (
    if(empty(x),
        [num],
        if(empty(head(x)),
            flatten(tail(x)),
            insert(
                head(head(x)), 
                flatten(
                    insert(
                        tail(head(x)),
                        tail(x)
                    )
                )
            )
        )
    )
)

func flattenMat :: [[num]] x => [num] (
        if(empty(x), 
            [num], 
            if( empty(head(x)), 
                flatten(tail(x)), 
                insert(
                    head(head(x)), 
                    flatten(insert(tail(head(x)) ,tail(x)))
                )
            )
        )
)
func sumAux :: [num] x => num (
     if(empty(x),
        0,
        +(head(x),sumAux(tail(x)))
     )
)

func sumMat :: [[num]] x => num (
    if(empty(x),
        0,
        +(sumAux(head(x)),sumMat(tail(x)))
    )
)

sumMat([
    [1,2,3],
    [4,5,6],
    [7,8,9]
])

// flattenMat([
//     [1,2,3],
//     [4,5,6],
//     [7,8,9]
// ])
