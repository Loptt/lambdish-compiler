//Filter Test-01
func filter :: [num] l, (num => bool) f => [num] (
    if (empty(l),
        [num],
        if (f(head(l)),
            insert(
                head(l),
                filter(tail(l), f)
            ),
            filter(tail(l), f)
        )
    )
)
//Map Test-02
func map :: [num] l, (num => num) f => [num] (
    if (empty(l),
        [num],
        insert(
            f(head(l)),
            map(tail(l), f)
        )
    )
)
//GetOperation Test-03
func getOperation :: num x, num y => ( => (num, num => num)) (
    if (<(x, y),
        sum,
        sub
    )
)

func sum :: => (num, num => num) (
    (# num x, num y => num (
        +(x, y)
    ))
)

func sub :: => (num, num => num) (
    (# num x, num y => num (
        -(x, y)
    ))
)

func operate :: num x, num y => num (
    getOperation(x, y)()(x, y)
)

map([1,2,3,4], (# num x => num (*(*(x, x), x))))
//filter([1,2,3,4,5,6], (# num x => bool (<(x, 4))))
//operate(3, 4)
