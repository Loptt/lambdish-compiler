//sortParity - Test 01
func filter :: [num] l, (num => bool) f => [num] (
    if (empty(l),
        [num],
        if (f(head(l)),
            insert(
                head(l),
                filter(tail(l), f)
            ),
            filter(tail(l), f)
        )
    )
)

func sortParity :: [num] l => [num] (
    append(
        filter(l, (# num x => bool (
            equal(%(x, 2), 0)
        ))),
        filter(l, (# num x => bool (
            equal(%(x, 2), 1)
        ))),
    )
)

//Merge Sort - Test 02
func length :: [num] l => num (
    if (empty(l),
        0,
        +(1, length(tail(l)))
    )
)

func take :: num n, [num] l => [num] (
    if (empty(l),
        l,
        if (or(equal(n, 0), <(n, 0)),
            [num],
            insert(head(l), take(-(n, 1), tail(l)))
        )
    )
)

func drop :: num n, [num] l => [num] (
    if (or(equal(n, 0), <(n, 0)),
        l,
        drop(-(n, 1), tail(l))
    )
)

func mergeSortAux :: [num] xl, [num] yl => [num] (
    if (empty(yl),
        xl,
        if (empty(xl),
            yl,
            if (<(head(xl), head(yl)),
                insert(
                    head(xl),
                    mergeSortAux(tail(xl), yl)
                ),
                insert(
                    head(yl),
                    mergeSortAux(xl, tail(yl))
                )
            )
        )
    )
)

func mergeSort :: [num] l => [num] (
    if (empty(l),
        [num],
        if (equal(length(l), 1),
            [head(l)],
            mergeSortAux(
                mergeSort(
                    take(/(length(l), 2), l)
                ),
                mergeSort(
                    drop(/(length(l), 2), l)
                )
            )
        )
    )
)

//Reduce - Test 03
func reduce :: [num] l, num x, (num, num => num) f => num (
    if (empty(l),
        x,
        f(
            head(l), 
            reduce(tail(l), x, f)
        )
    )
)

//fibonacci - Test 04
func fibonacci :: num n => num (
	if(<(n, 0),
        0,
        if(<(n, 2),
            n,
			+(
                fibonacci(-(n,1)), 
                fibonacci(-(n,2))
            )   
        )
    )
)

sortParity([1,2,3,4,5,6,7,8,9,0])
//sortParity([3,1,2,4])
//mergeSort([5,3,2,3,1])
// reduce(
//     [1,2,3,4,5], 0,
//     (# num x, num y => num (
//         +(x, y)
//     )
// ))

