func getHeads :: [[num]] matrix => [num] (
    if (empty(matrix),
        [num],
        insert(
            head(head(matrix)), 
            getHeads(tail(matrix))
        )
    )
)

func getTails :: [[num]] matrix => [[num]] (
    if (empty(matrix),
        [[num]],
        insert(
            tail(head(matrix)), getTails(tail(matrix))
        )
    )
)

func length :: [num] l => num (
    if (empty(l),
        0,
        +(1, length(tail(l)))
    )
)

func lengthM :: [[num]] l => num (
    if (empty(l),
        0,
        +(1, lengthM(tail(l)))
    )
)

func transpose :: [[num]] matrix => [[num]] (
    if (empty(head(matrix)),
        [[num]],
        insert(
            getHeads(matrix),
            transpose(getTails(matrix))
        )
    )
)

func map :: [num] rowa, [num] rowb, (num, num => num) f => [num] (
    if (or(empty(rowa), empty(rowb)),
        [num],
        insert(
            f(head(rowa), head(rowb)), 
            map(tail(rowa), tail(rowb), f)
        )   
    )
)

func reduce :: [num] l, num x, (num, num => num) f => num (
    if (empty(l),
        x,
        f(
            head(l), 
            reduce(tail(l), x, f)
        )
    )
)

func multiplyRow :: [num] row, [[num]] matrix => [num] (
    if (empty(matrix),
        [num],
        insert(
            reduce(
                map(row, head(matrix), (# num x, num y => num (
                    *(x, y)
                ))),
                0,
                (# num x, num y => num (
                    +(x, y)
                ))
            ),
            multiplyRow(row, tail(matrix))
        )
    )
)

func multiplyAux :: [[num]] ma, [[num]] mb => [[num]] (
    if (empty(ma),
        [[num]],
        insert(
            multiplyRow(head(ma), mb),
            multiplyAux(tail(ma), mb)
        )
    )
)

func uniformityAux :: [[num]] matrix, num l => bool (
    if (empty(matrix),
        true,
        and(
            equal(
                length(head(matrix)),
                l
            ),
            uniformityAux(tail(matrix), l)
        )
    )
)

func validateUniformity :: [[num]] matrix => bool (
    uniformityAux(matrix, length(head(matrix)))
)

func validateMatrices :: [[num]] ma, [[num]] mb => bool (
    and(
        and(
            validateUniformity(ma),
            validateUniformity(mb)
        ),
        // This equal validates that the columns of the first matrix are equal to the rows of the second matrix
        equal(
            length(head(ma)),
            lengthM(mb)
        )
    )
)

func multiplyMatrix :: [[num]] ma, [[num]] mb => [[num]] (
    if (!(validateMatrices(ma, mb)),
        [[num]],
        multiplyAux(ma, transpose(mb))
    )
)

multiplyMatrix([
    [1,2,3]
],
[
    [1,2,3,4],
    [4,5,7,5],
    [4,5,6,6]
]
)